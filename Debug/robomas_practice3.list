
robomas_practice3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000624c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800642c  0800642c  0000742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006584  08006584  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006584  08006584  00007584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800658c  0800658c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800658c  0800658c  0000758c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006590  08006590  00007590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006594  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000070  08006604  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08006604  00008398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161d0  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002911  00000000  00000000  0001e270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00020b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef7  00000000  00000000  00021ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c5f  00000000  00000000  00022db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bc6  00000000  00000000  0004aa16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102c05  00000000  00000000  000605dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001631e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005abc  00000000  00000000  00163224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00168ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006414 	.word	0x08006414

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006414 	.word	0x08006414

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	float k_p = 300, k_i = 0.003, k_d = -50000;
 80005b8:	4b70      	ldr	r3, [pc, #448]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80005ba:	61fb      	str	r3, [r7, #28]
 80005bc:	4b70      	ldr	r3, [pc, #448]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80005be:	61bb      	str	r3, [r7, #24]
 80005c0:	4b70      	ldr	r3, [pc, #448]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80005c2:	617b      	str	r3, [r7, #20]
	ac_l = ac_l + (float)rpm/60000;
 80005c4:	4b70      	ldr	r3, [pc, #448]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80005c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ca:	ee07 3a90 	vmov	s15, r3
 80005ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005d2:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800078c <HAL_TIM_PeriodElapsedCallback+0x1dc>
 80005d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005da:	4b6d      	ldr	r3, [pc, #436]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80005dc:	edd3 7a00 	vldr	s15, [r3]
 80005e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005e4:	4b6a      	ldr	r3, [pc, #424]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80005e6:	edc3 7a00 	vstr	s15, [r3]
	ind = ind + (purpose-ac_l);
 80005ea:	4b6a      	ldr	r3, [pc, #424]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80005ec:	ed93 7a00 	vldr	s14, [r3]
 80005f0:	4b67      	ldr	r3, [pc, #412]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80005f2:	edd3 7a00 	vldr	s15, [r3]
 80005f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005fa:	4b67      	ldr	r3, [pc, #412]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80005fc:	edd3 7a00 	vldr	s15, [r3]
 8000600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000604:	4b64      	ldr	r3, [pc, #400]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000606:	edc3 7a00 	vstr	s15, [r3]
	float times = ind*k_i;
 800060a:	4b63      	ldr	r3, [pc, #396]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800060c:	edd3 7a00 	vldr	s15, [r3]
 8000610:	ed97 7a06 	vldr	s14, [r7, #24]
 8000614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000618:	edc7 7a04 	vstr	s15, [r7, #16]
	if (times >= 10000 ) times = 10000;
 800061c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000620:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800079c <HAL_TIM_PeriodElapsedCallback+0x1ec>
 8000624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062c:	db02      	blt.n	8000634 <HAL_TIM_PeriodElapsedCallback+0x84>
 800062e:	4b5c      	ldr	r3, [pc, #368]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	e00a      	b.n	800064a <HAL_TIM_PeriodElapsedCallback+0x9a>
	else if (times <= -10000) times = -10000;
 8000634:	edd7 7a04 	vldr	s15, [r7, #16]
 8000638:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80007a4 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 800063c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000644:	d801      	bhi.n	800064a <HAL_TIM_PeriodElapsedCallback+0x9a>
 8000646:	4b58      	ldr	r3, [pc, #352]	@ (80007a8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000648:	613b      	str	r3, [r7, #16]
	d = (rpm)/60000;
 800064a:	4b4f      	ldr	r3, [pc, #316]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800064c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000650:	4a56      	ldr	r2, [pc, #344]	@ (80007ac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000652:	fb82 1203 	smull	r1, r2, r2, r3
 8000656:	1392      	asrs	r2, r2, #14
 8000658:	17db      	asrs	r3, r3, #31
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	ee07 3a90 	vmov	s15, r3
 8000660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000664:	4b52      	ldr	r3, [pc, #328]	@ (80007b0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000666:	edc3 7a00 	vstr	s15, [r3]
	if (ac_l*p_x*ind <= 0) ind = 0;
 800066a:	4b49      	ldr	r3, [pc, #292]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800066c:	ed93 7a00 	vldr	s14, [r3]
 8000670:	4b50      	ldr	r3, [pc, #320]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000672:	edd3 7a00 	vldr	s15, [r3]
 8000676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800067a:	4b47      	ldr	r3, [pc, #284]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800067c:	edd3 7a00 	vldr	s15, [r3]
 8000680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000684:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068c:	d803      	bhi.n	8000696 <HAL_TIM_PeriodElapsedCallback+0xe6>
 800068e:	4b42      	ldr	r3, [pc, #264]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000690:	f04f 0200 	mov.w	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
	float cu_f = k_p * (purpose-ac_l) + k_i * ind + k_d * d;
 8000696:	4b3f      	ldr	r3, [pc, #252]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000698:	ed93 7a00 	vldr	s14, [r3]
 800069c:	4b3c      	ldr	r3, [pc, #240]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800069e:	edd3 7a00 	vldr	s15, [r3]
 80006a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80006aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80006b0:	edd3 6a00 	vldr	s13, [r3]
 80006b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80006b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006c0:	4b3b      	ldr	r3, [pc, #236]	@ (80007b0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80006c2:	edd3 6a00 	vldr	s13, [r3]
 80006c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80006ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d2:	edc7 7a03 	vstr	s15, [r7, #12]
	if (cu_f>=1000) cu = 1000;
 80006d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80006da:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80007b8 <HAL_TIM_PeriodElapsedCallback+0x208>
 80006de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e6:	db04      	blt.n	80006f2 <HAL_TIM_PeriodElapsedCallback+0x142>
 80006e8:	4b34      	ldr	r3, [pc, #208]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80006ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006ee:	801a      	strh	r2, [r3, #0]
 80006f0:	e016      	b.n	8000720 <HAL_TIM_PeriodElapsedCallback+0x170>
	else if (cu_f <= -1000) cu = -1000;
 80006f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80006f6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80007c0 <HAL_TIM_PeriodElapsedCallback+0x210>
 80006fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000702:	d804      	bhi.n	800070e <HAL_TIM_PeriodElapsedCallback+0x15e>
 8000704:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000706:	f64f 4218 	movw	r2, #64536	@ 0xfc18
 800070a:	801a      	strh	r2, [r3, #0]
 800070c:	e008      	b.n	8000720 <HAL_TIM_PeriodElapsedCallback+0x170>
	else cu = (int16_t)cu_f;
 800070e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000716:	ee17 3a90 	vmov	r3, s15
 800071a:	b21a      	sxth	r2, r3
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800071e:	801a      	strh	r2, [r3, #0]

	TxData[0] = cu >> 8;
 8000720:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000726:	121b      	asrs	r3, r3, #8
 8000728:	b21b      	sxth	r3, r3
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800072e:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t)(cu & 0xff);
 8000730:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800073a:	705a      	strb	r2, [r3, #1]
	TxHeader.Identifier = 0x200;
 800073c:	4b22      	ldr	r3, [pc, #136]	@ (80007c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800073e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000742:	601a      	str	r2, [r3, #0]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader, TxData) != HAL_OK){
 8000744:	4a1f      	ldr	r2, [pc, #124]	@ (80007c4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000746:	4920      	ldr	r1, [pc, #128]	@ (80007c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000748:	4820      	ldr	r0, [pc, #128]	@ (80007cc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800074a:	f001 f926 	bl	800199a <HAL_FDCAN_AddMessageToTxFifoQ>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <HAL_TIM_PeriodElapsedCallback+0x1a8>
		Error_Handler();
 8000754:	f000 fa98 	bl	8000c88 <Error_Handler>
	}
	p_rpm = rpm;
 8000758:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800075a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000766:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000768:	edc3 7a00 	vstr	s15, [r3]
	p_x = ac_l;
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000772:	6013      	str	r3, [r2, #0]
	//printf("pupose:%d,hensa:%d,cu:%d,x:%d,ind:%d\r\n", (int)purpose, (int)(purpose-ac_l), (int)cu, (int)ac_l, (int)ind);

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	43960000 	.word	0x43960000
 8000780:	3b449ba6 	.word	0x3b449ba6
 8000784:	c7435000 	.word	0xc7435000
 8000788:	20000230 	.word	0x20000230
 800078c:	476a6000 	.word	0x476a6000
 8000790:	20000234 	.word	0x20000234
 8000794:	20000000 	.word	0x20000000
 8000798:	20000238 	.word	0x20000238
 800079c:	461c4000 	.word	0x461c4000
 80007a0:	461c4000 	.word	0x461c4000
 80007a4:	c61c4000 	.word	0xc61c4000
 80007a8:	c61c4000 	.word	0xc61c4000
 80007ac:	45e7b273 	.word	0x45e7b273
 80007b0:	20000240 	.word	0x20000240
 80007b4:	20000004 	.word	0x20000004
 80007b8:	447a0000 	.word	0x447a0000
 80007bc:	20000232 	.word	0x20000232
 80007c0:	c47a0000 	.word	0xc47a0000
 80007c4:	2000021c 	.word	0x2000021c
 80007c8:	200001d0 	.word	0x200001d0
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	2000023c 	.word	0x2000023c

080007d4 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d03f      	beq.n	8000868 <HAL_FDCAN_RxFifo0Callback+0x94>

	        /* Retrieve Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(&hfdcan3, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 80007ea:	4a22      	ldr	r2, [pc, #136]	@ (8000874 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	4822      	ldr	r0, [pc, #136]	@ (8000878 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 80007f0:	f001 f918 	bl	8001a24 <HAL_FDCAN_GetRxMessage>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d004      	beq.n	8000804 <HAL_FDCAN_RxFifo0Callback+0x30>
			printf("fdcan_getrxmessage is error\r\n");
 80007fa:	4820      	ldr	r0, [pc, #128]	@ (800087c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 80007fc:	f004 fee2 	bl	80055c4 <puts>
			Error_Handler();
 8000800:	f000 fa42 	bl	8000c88 <Error_Handler>
		}

		if (RxHeader.Identifier == (0x200 + motor_ID)) {
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f240 2201 	movw	r2, #513	@ 0x201
 800080c:	4293      	cmp	r3, r2
 800080e:	d12b      	bne.n	8000868 <HAL_FDCAN_RxFifo0Callback+0x94>
			angle= (RxData[0] << 8) | RxData[1];
 8000810:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21a      	sxth	r2, r3
 8000818:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 800081a:	785b      	ldrb	r3, [r3, #1]
 800081c:	b21b      	sxth	r3, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	b21b      	sxth	r3, r3
 8000822:	b29a      	uxth	r2, r3
 8000824:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8000826:	801a      	strh	r2, [r3, #0]
			rpm = (int16_t)((RxData[2] << 8) | RxData[3]);
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8000832:	78db      	ldrb	r3, [r3, #3]
 8000834:	b21b      	sxth	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b21a      	sxth	r2, r3
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 800083c:	801a      	strh	r2, [r3, #0]
			current = (int16_t)((RxData[4] << 8) | RxData[5]);
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	b21a      	sxth	r2, r3
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8000848:	795b      	ldrb	r3, [r3, #5]
 800084a:	b21b      	sxth	r3, r3
 800084c:	4313      	orrs	r3, r2
 800084e:	b21a      	sxth	r2, r3
 8000850:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8000852:	801a      	strh	r2, [r3, #0]
			printf("rpm:%d,angle:%d\n\r", rpm, angle);
 8000854:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8000856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800085a:	4619      	mov	r1, r3
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <HAL_FDCAN_RxFifo0Callback+0xac>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	480a      	ldr	r0, [pc, #40]	@ (800088c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000864:	f004 fe46 	bl	80054f4 <iprintf>
		}
	}

}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000224 	.word	0x20000224
 8000874:	200001f4 	.word	0x200001f4
 8000878:	2000008c 	.word	0x2000008c
 800087c:	0800642c 	.word	0x0800642c
 8000880:	2000022c 	.word	0x2000022c
 8000884:	20000230 	.word	0x20000230
 8000888:	2000022e 	.word	0x2000022e
 800088c:	0800644c 	.word	0x0800644c

08000890 <_write>:

int _write(int file, char *ptr, int len)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	230a      	movs	r3, #10
 80008a2:	68b9      	ldr	r1, [r7, #8]
 80008a4:	4803      	ldr	r0, [pc, #12]	@ (80008b4 <_write+0x24>)
 80008a6:	f003 fb13 	bl	8003ed0 <HAL_UART_Transmit>
    return len;
 80008aa:	687b      	ldr	r3, [r7, #4]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000013c 	.word	0x2000013c

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80008be:	4b3e      	ldr	r3, [pc, #248]	@ (80009b8 <main+0x100>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f004 fe84 	bl	80055d4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008cc:	f000 fc17 	bl	80010fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d0:	f000 f886 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d4:	f000 f99a 	bl	8000c0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d8:	f000 f94a 	bl	8000b70 <MX_USART2_UART_Init>
  MX_FDCAN3_Init();
 80008dc:	f000 f8cc 	bl	8000a78 <MX_FDCAN3_Init>
  MX_TIM6_Init();
 80008e0:	f000 f910 	bl	8000b04 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  printf("start");
 80008e4:	4835      	ldr	r0, [pc, #212]	@ (80009bc <main+0x104>)
 80008e6:	f004 fe05 	bl	80054f4 <iprintf>
  TxHeader.Identifier = 0x000;
 80008ea:	4b35      	ldr	r3, [pc, #212]	@ (80009c0 <main+0x108>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
   TxHeader.IdType = FDCAN_STANDARD_ID;
 80008f0:	4b33      	ldr	r3, [pc, #204]	@ (80009c0 <main+0x108>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
   TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008f6:	4b32      	ldr	r3, [pc, #200]	@ (80009c0 <main+0x108>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
   TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80008fc:	4b30      	ldr	r3, [pc, #192]	@ (80009c0 <main+0x108>)
 80008fe:	2208      	movs	r2, #8
 8000900:	60da      	str	r2, [r3, #12]
   TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000902:	4b2f      	ldr	r3, [pc, #188]	@ (80009c0 <main+0x108>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
   TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000908:	4b2d      	ldr	r3, [pc, #180]	@ (80009c0 <main+0x108>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
   TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800090e:	4b2c      	ldr	r3, [pc, #176]	@ (80009c0 <main+0x108>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
   TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000914:	4b2a      	ldr	r3, [pc, #168]	@ (80009c0 <main+0x108>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
   TxHeader.MessageMarker = 0;
 800091a:	4b29      	ldr	r3, [pc, #164]	@ (80009c0 <main+0x108>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]

   FDCAN_FilterTypeDef sFilterConfig;
   sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000920:	2300      	movs	r3, #0
 8000922:	603b      	str	r3, [r7, #0]
   sFilterConfig.FilterIndex = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
   sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
   sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800092c:	2301      	movs	r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
   sFilterConfig.FilterID1 = 0x200;
 8000930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000934:	613b      	str	r3, [r7, #16]
   sFilterConfig.FilterID2 = 0x209;
 8000936:	f240 2309 	movw	r3, #521	@ 0x209
 800093a:	617b      	str	r3, [r7, #20]

   if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK) {
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4820      	ldr	r0, [pc, #128]	@ (80009c4 <main+0x10c>)
 8000942:	f000 ff77 	bl	8001834 <HAL_FDCAN_ConfigFilter>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d004      	beq.n	8000956 <main+0x9e>
	   printf("fdcan_configfilter is error\r\n");
 800094c:	481e      	ldr	r0, [pc, #120]	@ (80009c8 <main+0x110>)
 800094e:	f004 fe39 	bl	80055c4 <puts>
       Error_Handler();
 8000952:	f000 f999 	bl	8000c88 <Error_Handler>
   }

   if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan3, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8000956:	2300      	movs	r3, #0
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2300      	movs	r3, #0
 800095c:	2202      	movs	r2, #2
 800095e:	2102      	movs	r1, #2
 8000960:	4818      	ldr	r0, [pc, #96]	@ (80009c4 <main+0x10c>)
 8000962:	f000 ffc1 	bl	80018e8 <HAL_FDCAN_ConfigGlobalFilter>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d004      	beq.n	8000976 <main+0xbe>
	   printf("fdcan_configglobalfilter is error\r\n");
 800096c:	4817      	ldr	r0, [pc, #92]	@ (80009cc <main+0x114>)
 800096e:	f004 fe29 	bl	80055c4 <puts>
       Error_Handler();
 8000972:	f000 f989 	bl	8000c88 <Error_Handler>
   }

   if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK) {
 8000976:	4813      	ldr	r0, [pc, #76]	@ (80009c4 <main+0x10c>)
 8000978:	f000 ffe7 	bl	800194a <HAL_FDCAN_Start>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d004      	beq.n	800098c <main+0xd4>
	   printf("fdcan_start is error\r\n");
 8000982:	4813      	ldr	r0, [pc, #76]	@ (80009d0 <main+0x118>)
 8000984:	f004 fe1e 	bl	80055c4 <puts>
       Error_Handler();
 8000988:	f000 f97e 	bl	8000c88 <Error_Handler>
   }

   if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 800098c:	2200      	movs	r2, #0
 800098e:	2101      	movs	r1, #1
 8000990:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <main+0x10c>)
 8000992:	f001 f94f 	bl	8001c34 <HAL_FDCAN_ActivateNotification>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d004      	beq.n	80009a6 <main+0xee>
	   printf("fdcan_activatenotification is error\r\n");
 800099c:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <main+0x11c>)
 800099e:	f004 fe11 	bl	80055c4 <puts>
	   Error_Handler();
 80009a2:	f000 f971 	bl	8000c88 <Error_Handler>
   }

   printf("can_start");
 80009a6:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <main+0x120>)
 80009a8:	f004 fda4 	bl	80054f4 <iprintf>

   HAL_TIM_Base_Start_IT(&htim6);
 80009ac:	480b      	ldr	r0, [pc, #44]	@ (80009dc <main+0x124>)
 80009ae:	f002 febf 	bl	8003730 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80009b2:	bf00      	nop
 80009b4:	e7fd      	b.n	80009b2 <main+0xfa>
 80009b6:	bf00      	nop
 80009b8:	20000020 	.word	0x20000020
 80009bc:	08006460 	.word	0x08006460
 80009c0:	200001d0 	.word	0x200001d0
 80009c4:	2000008c 	.word	0x2000008c
 80009c8:	08006468 	.word	0x08006468
 80009cc:	08006488 	.word	0x08006488
 80009d0:	080064ac 	.word	0x080064ac
 80009d4:	080064c4 	.word	0x080064c4
 80009d8:	080064ec 	.word	0x080064ec
 80009dc:	200000f0 	.word	0x200000f0

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	@ 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	2238      	movs	r2, #56	@ 0x38
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f004 ff84 	bl	80058fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a06:	f001 fe0b 	bl	8002620 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a14:	2340      	movs	r3, #64	@ 0x40
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a24:	230a      	movs	r3, #10
 8000a26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fea5 	bl	8002788 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a44:	f000 f920 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	230f      	movs	r3, #15
 8000a4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2102      	movs	r1, #2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 f9a3 	bl	8002dac <HAL_RCC_ClockConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a6c:	f000 f90c 	bl	8000c88 <Error_Handler>
  }
}
 8000a70:	bf00      	nop
 8000a72:	3750      	adds	r7, #80	@ 0x50
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000a7e:	4a20      	ldr	r2, [pc, #128]	@ (8000b00 <MX_FDCAN3_Init+0x88>)
 8000a80:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000a94:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 4;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 15;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 4;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 1;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000adc:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	@ (8000afc <MX_FDCAN3_Init+0x84>)
 8000aea:	f000 fd49 	bl	8001580 <HAL_FDCAN_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 8000af4:	f000 f8c8 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000008c 	.word	0x2000008c
 8000b00:	40006c00 	.word	0x40006c00

08000b04 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b14:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <MX_TIM6_Init+0x64>)
 8000b16:	4a15      	ldr	r2, [pc, #84]	@ (8000b6c <MX_TIM6_Init+0x68>)
 8000b18:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <MX_TIM6_Init+0x64>)
 8000b1c:	2209      	movs	r2, #9
 8000b1e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <MX_TIM6_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <MX_TIM6_Init+0x64>)
 8000b28:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b2c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <MX_TIM6_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b34:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <MX_TIM6_Init+0x64>)
 8000b36:	f002 fda3 	bl	8003680 <HAL_TIM_Base_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b40:	f000 f8a2 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <MX_TIM6_Init+0x64>)
 8000b52:	f003 f891 	bl	8003c78 <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b5c:	f000 f894 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000f0 	.word	0x200000f0
 8000b6c:	40001000 	.word	0x40001000

08000b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b74:	4b22      	ldr	r3, [pc, #136]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b76:	4a23      	ldr	r2, [pc, #140]	@ (8000c04 <MX_USART2_UART_Init+0x94>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b7c:	4a22      	ldr	r2, [pc, #136]	@ (8000c08 <MX_USART2_UART_Init+0x98>)
 8000b7e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b80:	4b1f      	ldr	r3, [pc, #124]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b92:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b94:	220c      	movs	r2, #12
 8000b96:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9e:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb6:	4812      	ldr	r0, [pc, #72]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000bb8:	f003 f93a 	bl	8003e30 <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000bc2:	f000 f861 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	480d      	ldr	r0, [pc, #52]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000bca:	f004 fb06 	bl	80051da <HAL_UARTEx_SetTxFifoThreshold>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000bd4:	f000 f858 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4809      	ldr	r0, [pc, #36]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000bdc:	f004 fb3b 	bl	8005256 <HAL_UARTEx_SetRxFifoThreshold>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000be6:	f000 f84f 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <MX_USART2_UART_Init+0x90>)
 8000bec:	f004 fabc 	bl	8005168 <HAL_UARTEx_DisableFifoMode>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000bf6:	f000 f847 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000013c 	.word	0x2000013c
 8000c04:	40004400 	.word	0x40004400
 8000c08:	000f4240 	.word	0x000f4240

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <MX_GPIO_Init+0x74>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	4a16      	ldr	r2, [pc, #88]	@ (8000c80 <MX_GPIO_Init+0x74>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_GPIO_Init+0x74>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_GPIO_Init+0x74>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <MX_GPIO_Init+0x74>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_GPIO_Init+0x74>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2140      	movs	r1, #64	@ 0x40
 8000c56:	480b      	ldr	r0, [pc, #44]	@ (8000c84 <MX_GPIO_Init+0x78>)
 8000c58:	f001 fcca 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c5c:	2340      	movs	r3, #64	@ 0x40
 8000c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <MX_GPIO_Init+0x78>)
 8000c74:	f001 fb3a 	bl	80022ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48000400 	.word	0x48000400

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("error\r\n");
 8000c8c:	4803      	ldr	r0, [pc, #12]	@ (8000c9c <Error_Handler+0x14>)
 8000c8e:	f004 fc99 	bl	80055c4 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c92:	b672      	cpsid	i
}
 8000c94:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c96:	bf00      	nop
 8000c98:	e7fd      	b.n	8000c96 <Error_Handler+0xe>
 8000c9a:	bf00      	nop
 8000c9c:	080064f8 	.word	0x080064f8

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000caa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc2:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cd6:	f001 fd47 	bl	8002768 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b09e      	sub	sp, #120	@ 0x78
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	2254      	movs	r2, #84	@ 0x54
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f004 fdf7 	bl	80058fc <memset>
  if(hfdcan->Instance==FDCAN3)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a27      	ldr	r2, [pc, #156]	@ (8000db0 <HAL_FDCAN_MspInit+0xc8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d147      	bne.n	8000da8 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000d1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d22:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 fa5b 	bl	80031e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000d34:	f7ff ffa8 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d38:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <HAL_FDCAN_MspInit+0xcc>)
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000db4 <HAL_FDCAN_MspInit+0xcc>)
 8000d3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <HAL_FDCAN_MspInit+0xcc>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <HAL_FDCAN_MspInit+0xcc>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d54:	4a17      	ldr	r2, [pc, #92]	@ (8000db4 <HAL_FDCAN_MspInit+0xcc>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <HAL_FDCAN_MspInit+0xcc>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PB3     ------> FDCAN3_RX
    PB4     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d68:	2318      	movs	r3, #24
 8000d6a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000d78:	230b      	movs	r3, #11
 8000d7a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d80:	4619      	mov	r1, r3
 8000d82:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <HAL_FDCAN_MspInit+0xd0>)
 8000d84:	f001 fab2 	bl	80022ec <HAL_GPIO_Init>

    /* FDCAN3 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2058      	movs	r0, #88	@ 0x58
 8000d8e:	f000 fb02 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8000d92:	2058      	movs	r0, #88	@ 0x58
 8000d94:	f000 fb19 	bl	80013ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2059      	movs	r0, #89	@ 0x59
 8000d9e:	f000 fafa 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 8000da2:	2059      	movs	r0, #89	@ 0x59
 8000da4:	f000 fb11 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3778      	adds	r7, #120	@ 0x78
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40006c00 	.word	0x40006c00
 8000db4:	40021000 	.word	0x40021000
 8000db8:	48000400 	.word	0x48000400

08000dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <HAL_TIM_Base_MspInit+0x44>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d113      	bne.n	8000df6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <HAL_TIM_Base_MspInit+0x48>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <HAL_TIM_Base_MspInit+0x48>)
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_TIM_Base_MspInit+0x48>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2036      	movs	r0, #54	@ 0x36
 8000dec:	f000 fad3 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000df0:	2036      	movs	r0, #54	@ 0x36
 8000df2:	f000 faea 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40001000 	.word	0x40001000
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b09e      	sub	sp, #120	@ 0x78
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	2254      	movs	r2, #84	@ 0x54
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 fd67 	bl	80058fc <memset>
  if(huart->Instance==USART2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a23      	ldr	r2, [pc, #140]	@ (8000ec0 <HAL_UART_MspInit+0xb8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d13e      	bne.n	8000eb6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 f9cd 	bl	80031e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e50:	f7ff ff1a 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <HAL_UART_MspInit+0xbc>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e58:	4a1a      	ldr	r2, [pc, #104]	@ (8000ec4 <HAL_UART_MspInit+0xbc>)
 8000e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <HAL_UART_MspInit+0xbc>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <HAL_UART_MspInit+0xbc>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e70:	4a14      	ldr	r2, [pc, #80]	@ (8000ec4 <HAL_UART_MspInit+0xbc>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_UART_MspInit+0xbc>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e84:	230c      	movs	r3, #12
 8000e86:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e94:	2307      	movs	r3, #7
 8000e96:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea2:	f001 fa23 	bl	80022ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2026      	movs	r0, #38	@ 0x26
 8000eac:	f000 fa73 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eb0:	2026      	movs	r0, #38	@ 0x26
 8000eb2:	f000 fa8a 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3778      	adds	r7, #120	@ 0x78
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <NMI_Handler+0x4>

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <UsageFault_Handler+0x4>

08000ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1e:	f000 f941 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f2c:	4802      	ldr	r0, [pc, #8]	@ (8000f38 <USART2_IRQHandler+0x10>)
 8000f2e:	f003 f85d 	bl	8003fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000013c 	.word	0x2000013c

08000f3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <TIM6_DAC_IRQHandler+0x10>)
 8000f42:	f002 fc6d 	bl	8003820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000f0 	.word	0x200000f0

08000f50 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8000f54:	4802      	ldr	r0, [pc, #8]	@ (8000f60 <FDCAN3_IT0_IRQHandler+0x10>)
 8000f56:	f000 ff53 	bl	8001e00 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000008c 	.word	0x2000008c

08000f64 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <FDCAN3_IT1_IRQHandler+0x10>)
 8000f6a:	f000 ff49 	bl	8001e00 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000008c 	.word	0x2000008c

08000f78 <_read>:
{
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	e00a      	b.n	8000fa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f8a:	f3af 8000 	nop.w
 8000f8e:	4601      	mov	r1, r0
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	60ba      	str	r2, [r7, #8]
 8000f96:	b2ca      	uxtb	r2, r1
 8000f98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbf0      	blt.n	8000f8a <_read+0x12>
  }

  return len;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fda:	605a      	str	r2, [r3, #4]
  return 0;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_isatty>:

int _isatty(int file)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <_sbrk+0x5c>)
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <_sbrk+0x60>)
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <_sbrk+0x64>)
 800103a:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <_sbrk+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d207      	bcs.n	800105c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800104c:	f004 fca4 	bl	8005998 <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e009      	b.n	8001070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20020000 	.word	0x20020000
 800107c:	00000400 	.word	0x00000400
 8001080:	20000244 	.word	0x20000244
 8001084:	20000398 	.word	0x20000398

08001088 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <SystemInit+0x20>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <SystemInit+0x20>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010ac:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b0:	f7ff ffea 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	@ (80010ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <LoopForever+0xe>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	@ (80010f8 <LoopForever+0x16>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010da:	f004 fc63 	bl	80059a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010de:	f7ff fbeb 	bl	80008b8 <main>

080010e2 <LoopForever>:

LoopForever:
    b LoopForever
 80010e2:	e7fe      	b.n	80010e2 <LoopForever>
  ldr   r0, =_estack
 80010e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010f0:	08006594 	.word	0x08006594
  ldr r2, =_sbss
 80010f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010f8:	20000398 	.word	0x20000398

080010fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC1_2_IRQHandler>

080010fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 f939 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110e:	200f      	movs	r0, #15
 8001110:	f000 f80e 	bl	8001130 <HAL_InitTick>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	e001      	b.n	8001124 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001120:	f7ff fdbe 	bl	8000ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001124:	79fb      	ldrb	r3, [r7, #7]

}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800113c:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <HAL_InitTick+0x68>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d022      	beq.n	800118a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <HAL_InitTick+0x6c>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <HAL_InitTick+0x68>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001150:	fbb1 f3f3 	udiv	r3, r1, r3
 8001154:	fbb2 f3f3 	udiv	r3, r2, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f944 	bl	80013e6 <HAL_SYSTICK_Config>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10f      	bne.n	8001184 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	d809      	bhi.n	800117e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116a:	2200      	movs	r2, #0
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	f000 f910 	bl	8001396 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_InitTick+0x70>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	e007      	b.n	800118e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e004      	b.n	800118e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e001      	b.n	800118e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000010 	.word	0x20000010
 800119c:	20000008 	.word	0x20000008
 80011a0:	2000000c 	.word	0x2000000c

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <HAL_IncTick+0x1c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <HAL_IncTick+0x20>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a03      	ldr	r2, [pc, #12]	@ (80011c0 <HAL_IncTick+0x1c>)
 80011b4:	6013      	str	r3, [r2, #0]
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	20000248 	.word	0x20000248
 80011c4:	20000010 	.word	0x20000010

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000248 	.word	0x20000248

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	@ (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	@ (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	@ (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	@ 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	@ 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff40 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff90 	bl	80012d4 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5f 	bl	8001280 <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff33 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffa4 	bl	800133c <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d005      	beq.n	8001422 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2204      	movs	r2, #4
 800141a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e037      	b.n	8001492 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 020e 	bic.w	r2, r2, #14
 8001430:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800143c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001440:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f003 021f 	and.w	r2, r3, #31
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	2101      	movs	r1, #1
 8001460:	fa01 f202 	lsl.w	r2, r1, r2
 8001464:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800146e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001482:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001486:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001490:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d00d      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2204      	movs	r2, #4
 80014cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	e047      	b.n	8001574 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 020e 	bic.w	r2, r2, #14
 80014f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800150e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001512:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	2101      	movs	r1, #1
 8001522:	fa01 f202 	lsl.w	r2, r1, r2
 8001526:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001530:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00c      	beq.n	8001554 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001544:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001548:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001552:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
    }
  }
  return status;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e147      	b.n	8001822 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d106      	bne.n	80015ac <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fb9e 	bl	8000ce8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699a      	ldr	r2, [r3, #24]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0210 	bic.w	r2, r2, #16
 80015ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015bc:	f7ff fe04 	bl	80011c8 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80015c2:	e012      	b.n	80015ea <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80015c4:	f7ff fe00 	bl	80011c8 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d90b      	bls.n	80015ea <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2203      	movs	r2, #3
 80015e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e11b      	b.n	8001822 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d0e5      	beq.n	80015c4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001608:	f7ff fdde 	bl	80011c8 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800160e:	e012      	b.n	8001636 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001610:	f7ff fdda 	bl	80011c8 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b0a      	cmp	r3, #10
 800161c:	d90b      	bls.n	8001636 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001622:	f043 0201 	orr.w	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2203      	movs	r2, #3
 800162e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0f5      	b.n	8001822 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0e5      	beq.n	8001610 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699a      	ldr	r2, [r3, #24]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0202 	orr.w	r2, r2, #2
 8001652:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a74      	ldr	r2, [pc, #464]	@ (800182c <HAL_FDCAN_Init+0x2ac>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d103      	bne.n	8001666 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800165e:	4a74      	ldr	r2, [pc, #464]	@ (8001830 <HAL_FDCAN_Init+0x2b0>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7c1b      	ldrb	r3, [r3, #16]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d108      	bne.n	8001680 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	699a      	ldr	r2, [r3, #24]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800167c:	619a      	str	r2, [r3, #24]
 800167e:	e007      	b.n	8001690 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699a      	ldr	r2, [r3, #24]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800168e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7c5b      	ldrb	r3, [r3, #17]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016a6:	619a      	str	r2, [r3, #24]
 80016a8:	e007      	b.n	80016ba <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	699a      	ldr	r2, [r3, #24]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80016b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7c9b      	ldrb	r3, [r3, #18]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699a      	ldr	r2, [r3, #24]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80016d0:	619a      	str	r2, [r3, #24]
 80016d2:	e007      	b.n	80016e4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80016e2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	699a      	ldr	r2, [r3, #24]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001708:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0210 	bic.w	r2, r2, #16
 8001718:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d108      	bne.n	8001734 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	699a      	ldr	r2, [r3, #24]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0204 	orr.w	r2, r2, #4
 8001730:	619a      	str	r2, [r3, #24]
 8001732:	e02c      	b.n	800178e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d028      	beq.n	800178e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d01c      	beq.n	800177e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699a      	ldr	r2, [r3, #24]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001752:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0210 	orr.w	r2, r2, #16
 8001762:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d110      	bne.n	800178e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0220 	orr.w	r2, r2, #32
 800177a:	619a      	str	r2, [r3, #24]
 800177c:	e007      	b.n	800178e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699a      	ldr	r2, [r3, #24]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0220 	orr.w	r2, r2, #32
 800178c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	3b01      	subs	r3, #1
 8001794:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	3b01      	subs	r3, #1
 800179c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800179e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80017a6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80017b6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017b8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80017c2:	d115      	bne.n	80017f0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ce:	3b01      	subs	r3, #1
 80017d0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017d2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d8:	3b01      	subs	r3, #1
 80017da:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80017dc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e4:	3b01      	subs	r3, #1
 80017e6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80017ec:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017ee:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fc88 	bl	800211c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40006400 	.word	0x40006400
 8001830:	40006500 	.word	0x40006500

08001834 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001844:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d002      	beq.n	8001852 <HAL_FDCAN_ConfigFilter+0x1e>
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d13d      	bne.n	80018ce <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d119      	bne.n	800188e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001866:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800186e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e01d      	b.n	80018ca <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	075a      	lsls	r2, r3, #29
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	079a      	lsls	r2, r3, #30
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4413      	add	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3304      	adds	r3, #4
 80018c2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e006      	b.n	80018dc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d2:	f043 0202 	orr.w	r2, r3, #2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
  }
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d116      	bne.n	8001930 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800190a:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	011a      	lsls	r2, r3, #4
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	431a      	orrs	r2, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	431a      	orrs	r2, r3
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	431a      	orrs	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	e006      	b.n	800193e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001934:	f043 0204 	orr.w	r2, r3, #4
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
  }
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d110      	bne.n	8001980 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2202      	movs	r2, #2
 8001962:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699a      	ldr	r2, [r3, #24]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0201 	bic.w	r2, r2, #1
 8001974:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	e006      	b.n	800198e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001984:	f043 0204 	orr.w	r2, r3, #4
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
  }
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d12c      	bne.n	8001a0c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e023      	b.n	8001a1a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80019da:	0c1b      	lsrs	r3, r3, #16
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 fc03 	bl	80021f4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2101      	movs	r1, #1
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	fa01 f202 	lsl.w	r2, r1, r2
 80019fa:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80019fe:	2201      	movs	r2, #1
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e006      	b.n	8001a1a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a10:	f043 0208 	orr.w	r2, r3, #8
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
  }
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b08b      	sub	sp, #44	@ 0x2c
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a3c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	f040 80e8 	bne.w	8001c16 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b40      	cmp	r3, #64	@ 0x40
 8001a4a:	d137      	bne.n	8001abc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d107      	bne.n	8001a6c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0db      	b.n	8001c24 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a74:	0e1b      	lsrs	r3, r3, #24
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d10a      	bne.n	8001a94 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a86:	0a5b      	lsrs	r3, r3, #9
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001a90:	2301      	movs	r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aba:	e036      	b.n	8001b2a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d107      	bne.n	8001adc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0a3      	b.n	8001c24 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ae4:	0e1b      	lsrs	r3, r3, #24
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d10a      	bne.n	8001b04 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	4413      	add	r3, r2
 8001b16:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	440b      	add	r3, r1
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d107      	bne.n	8001b4e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0c9b      	lsrs	r3, r3, #18
 8001b44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e005      	b.n	8001b5a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	3304      	adds	r3, #4
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0c1b      	lsrs	r3, r3, #16
 8001b88:	f003 020f 	and.w	r2, r3, #15
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0e1b      	lsrs	r3, r3, #24
 8001bae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0fda      	lsrs	r2, r3, #31
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
 8001bce:	e00a      	b.n	8001be6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	441a      	add	r2, r3
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	440b      	add	r3, r1
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	3301      	adds	r3, #1
 8001be4:	623b      	str	r3, [r7, #32]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	4a11      	ldr	r2, [pc, #68]	@ (8001c30 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001bec:	5cd3      	ldrb	r3, [r2, r3]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d3ec      	bcc.n	8001bd0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b40      	cmp	r3, #64	@ 0x40
 8001bfa:	d105      	bne.n	8001c08 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001c06:	e004      	b.n	8001c12 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e006      	b.n	8001c24 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1a:	f043 0208 	orr.w	r2, r3, #8
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
  }
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	372c      	adds	r7, #44	@ 0x2c
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	08006518 	.word	0x08006518

08001c34 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001c46:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d003      	beq.n	8001c56 <HAL_FDCAN_ActivateNotification+0x22>
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	f040 80c8 	bne.w	8001de6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d03b      	beq.n	8001cea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d031      	beq.n	8001cea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d027      	beq.n	8001cea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01d      	beq.n	8001cea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d013      	beq.n	8001cea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00c      	beq.n	8001cfa <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d107      	bne.n	8001cfa <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d13b      	bne.n	8001d86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d131      	bne.n	8001d86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d127      	bne.n	8001d86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11d      	bne.n	8001d86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d113      	bne.n	8001d86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00c      	beq.n	8001d96 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0202 	orr.w	r2, r2, #2
 8001d94:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d009      	beq.n	8001db4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d009      	beq.n	8001dd2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e006      	b.n	8001df4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dea:	f043 0202 	orr.w	r2, r3, #2
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
  }
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	371c      	adds	r7, #28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	@ 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e0e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e34:	4013      	ands	r3, r2
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e56:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001e5a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e62:	6a3a      	ldr	r2, [r7, #32]
 8001e64:	4013      	ands	r3, r2
 8001e66:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e6e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e72:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e86:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e8e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00b      	beq.n	8001eb2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2240      	movs	r2, #64	@ 0x40
 8001eaa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f916 	bl	80020de <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d019      	beq.n	8001ef0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d014      	beq.n	8001ef0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ece:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ee6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001ee8:	6939      	ldr	r1, [r7, #16]
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8d8 	bl	80020a0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001efc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8a2 	bl	800204a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f12:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fc5c 	bl	80007d4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f28:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f897 	bl	8002060 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00c      	beq.n	8001f56 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f4e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f890 	bl	8002076 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d018      	beq.n	8001f92 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d013      	beq.n	8001f92 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f72:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2280      	movs	r2, #128	@ 0x80
 8001f88:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001f8a:	68f9      	ldr	r1, [r7, #12]
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f87c 	bl	800208a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00c      	beq.n	8001fb6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f880 	bl	80020b6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d007      	beq.n	8001fda <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001fd2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f878 	bl	80020ca <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00f      	beq.n	8002004 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ff6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002012:	69f9      	ldr	r1, [r7, #28]
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f876 	bl	8002106 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6a3a      	ldr	r2, [r7, #32]
 8002026:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f858 	bl	80020f2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002042:	bf00      	nop
 8002044:	3730      	adds	r7, #48	@ 0x30
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002124:	4b30      	ldr	r3, [pc, #192]	@ (80021e8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002126:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2f      	ldr	r2, [pc, #188]	@ (80021ec <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d103      	bne.n	800213a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002138:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a2c      	ldr	r2, [pc, #176]	@ (80021f0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d103      	bne.n	800214c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800214a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800215a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002162:	041a      	lsls	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002180:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002188:	061a      	lsls	r2, r3, #24
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	e005      	b.n	80021ce <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3304      	adds	r3, #4
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d3f3      	bcc.n	80021c2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80021da:	bf00      	nop
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	4000a400 	.word	0x4000a400
 80021ec:	40006800 	.word	0x40006800
 80021f0:	40006c00 	.word	0x40006c00

080021f4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	@ 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10a      	bne.n	8002220 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002212:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800221a:	4313      	orrs	r3, r2
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	e00a      	b.n	8002236 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002228:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800222e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002230:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002234:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002240:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002246:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800224c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	3304      	adds	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	3304      	adds	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e020      	b.n	80022ca <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3303      	adds	r3, #3
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	3302      	adds	r3, #2
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	440b      	add	r3, r1
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022a0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3301      	adds	r3, #1
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	440b      	add	r3, r1
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80022ae:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	440a      	add	r2, r1
 80022b6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80022b8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	3304      	adds	r3, #4
 80022c2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3304      	adds	r3, #4
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	4a06      	ldr	r2, [pc, #24]	@ (80022e8 <FDCAN_CopyMessageToRAM+0xf4>)
 80022d0:	5cd3      	ldrb	r3, [r2, r3]
 80022d2:	461a      	mov	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d3d6      	bcc.n	8002288 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	3724      	adds	r7, #36	@ 0x24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	08006518 	.word	0x08006518

080022ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022fa:	e15a      	b.n	80025b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	4013      	ands	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 814c 	beq.w	80025ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d005      	beq.n	800232c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002328:	2b02      	cmp	r3, #2
 800232a:	d130      	bne.n	800238e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002362:	2201      	movs	r2, #1
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	f003 0201 	and.w	r2, r3, #1
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b03      	cmp	r3, #3
 8002398:	d017      	beq.n	80023ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d123      	bne.n	800241e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	220f      	movs	r2, #15
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	6939      	ldr	r1, [r7, #16]
 800241a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	2203      	movs	r2, #3
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0203 	and.w	r2, r3, #3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80a6 	beq.w	80025ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002460:	4b5b      	ldr	r3, [pc, #364]	@ (80025d0 <HAL_GPIO_Init+0x2e4>)
 8002462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002464:	4a5a      	ldr	r2, [pc, #360]	@ (80025d0 <HAL_GPIO_Init+0x2e4>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6613      	str	r3, [r2, #96]	@ 0x60
 800246c:	4b58      	ldr	r3, [pc, #352]	@ (80025d0 <HAL_GPIO_Init+0x2e4>)
 800246e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002478:	4a56      	ldr	r2, [pc, #344]	@ (80025d4 <HAL_GPIO_Init+0x2e8>)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024a2:	d01f      	beq.n	80024e4 <HAL_GPIO_Init+0x1f8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a4c      	ldr	r2, [pc, #304]	@ (80025d8 <HAL_GPIO_Init+0x2ec>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d019      	beq.n	80024e0 <HAL_GPIO_Init+0x1f4>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a4b      	ldr	r2, [pc, #300]	@ (80025dc <HAL_GPIO_Init+0x2f0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d013      	beq.n	80024dc <HAL_GPIO_Init+0x1f0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a4a      	ldr	r2, [pc, #296]	@ (80025e0 <HAL_GPIO_Init+0x2f4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00d      	beq.n	80024d8 <HAL_GPIO_Init+0x1ec>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a49      	ldr	r2, [pc, #292]	@ (80025e4 <HAL_GPIO_Init+0x2f8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d007      	beq.n	80024d4 <HAL_GPIO_Init+0x1e8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a48      	ldr	r2, [pc, #288]	@ (80025e8 <HAL_GPIO_Init+0x2fc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d101      	bne.n	80024d0 <HAL_GPIO_Init+0x1e4>
 80024cc:	2305      	movs	r3, #5
 80024ce:	e00a      	b.n	80024e6 <HAL_GPIO_Init+0x1fa>
 80024d0:	2306      	movs	r3, #6
 80024d2:	e008      	b.n	80024e6 <HAL_GPIO_Init+0x1fa>
 80024d4:	2304      	movs	r3, #4
 80024d6:	e006      	b.n	80024e6 <HAL_GPIO_Init+0x1fa>
 80024d8:	2303      	movs	r3, #3
 80024da:	e004      	b.n	80024e6 <HAL_GPIO_Init+0x1fa>
 80024dc:	2302      	movs	r3, #2
 80024de:	e002      	b.n	80024e6 <HAL_GPIO_Init+0x1fa>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_GPIO_Init+0x1fa>
 80024e4:	2300      	movs	r3, #0
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	f002 0203 	and.w	r2, r2, #3
 80024ec:	0092      	lsls	r2, r2, #2
 80024ee:	4093      	lsls	r3, r2
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f6:	4937      	ldr	r1, [pc, #220]	@ (80025d4 <HAL_GPIO_Init+0x2e8>)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002504:	4b39      	ldr	r3, [pc, #228]	@ (80025ec <HAL_GPIO_Init+0x300>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002528:	4a30      	ldr	r2, [pc, #192]	@ (80025ec <HAL_GPIO_Init+0x300>)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800252e:	4b2f      	ldr	r3, [pc, #188]	@ (80025ec <HAL_GPIO_Init+0x300>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002552:	4a26      	ldr	r2, [pc, #152]	@ (80025ec <HAL_GPIO_Init+0x300>)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002558:	4b24      	ldr	r3, [pc, #144]	@ (80025ec <HAL_GPIO_Init+0x300>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800257c:	4a1b      	ldr	r2, [pc, #108]	@ (80025ec <HAL_GPIO_Init+0x300>)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002582:	4b1a      	ldr	r3, [pc, #104]	@ (80025ec <HAL_GPIO_Init+0x300>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025a6:	4a11      	ldr	r2, [pc, #68]	@ (80025ec <HAL_GPIO_Init+0x300>)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	3301      	adds	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f47f ae9d 	bne.w	80022fc <HAL_GPIO_Init+0x10>
  }
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010000 	.word	0x40010000
 80025d8:	48000400 	.word	0x48000400
 80025dc:	48000800 	.word	0x48000800
 80025e0:	48000c00 	.word	0x48000c00
 80025e4:	48001000 	.word	0x48001000
 80025e8:	48001400 	.word	0x48001400
 80025ec:	40010400 	.word	0x40010400

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800260c:	e002      	b.n	8002614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d141      	bne.n	80026b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800262e:	4b4b      	ldr	r3, [pc, #300]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800263a:	d131      	bne.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800263c:	4b47      	ldr	r3, [pc, #284]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002642:	4a46      	ldr	r2, [pc, #280]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002648:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800264c:	4b43      	ldr	r3, [pc, #268]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002654:	4a41      	ldr	r2, [pc, #260]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800265a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800265c:	4b40      	ldr	r3, [pc, #256]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2232      	movs	r2, #50	@ 0x32
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	4a3f      	ldr	r2, [pc, #252]	@ (8002764 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	0c9b      	lsrs	r3, r3, #18
 800266e:	3301      	adds	r3, #1
 8002670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002672:	e002      	b.n	800267a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3b01      	subs	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800267a:	4b38      	ldr	r3, [pc, #224]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002686:	d102      	bne.n	800268e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f2      	bne.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800268e:	4b33      	ldr	r3, [pc, #204]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800269a:	d158      	bne.n	800274e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e057      	b.n	8002750 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026a0:	4b2e      	ldr	r3, [pc, #184]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026a6:	4a2d      	ldr	r2, [pc, #180]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026b0:	e04d      	b.n	800274e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026b8:	d141      	bne.n	800273e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ba:	4b28      	ldr	r3, [pc, #160]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026c6:	d131      	bne.n	800272c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026c8:	4b24      	ldr	r3, [pc, #144]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026ce:	4a23      	ldr	r2, [pc, #140]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d8:	4b20      	ldr	r3, [pc, #128]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026e0:	4a1e      	ldr	r2, [pc, #120]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2232      	movs	r2, #50	@ 0x32
 80026ee:	fb02 f303 	mul.w	r3, r2, r3
 80026f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002764 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	0c9b      	lsrs	r3, r3, #18
 80026fa:	3301      	adds	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026fe:	e002      	b.n	8002706 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3b01      	subs	r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002706:	4b15      	ldr	r3, [pc, #84]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002712:	d102      	bne.n	800271a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f2      	bne.n	8002700 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002726:	d112      	bne.n	800274e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e011      	b.n	8002750 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002732:	4a0a      	ldr	r2, [pc, #40]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002738:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800273c:	e007      	b.n	800274e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800273e:	4b07      	ldr	r3, [pc, #28]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002746:	4a05      	ldr	r2, [pc, #20]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002748:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800274c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40007000 	.word	0x40007000
 8002760:	20000008 	.word	0x20000008
 8002764:	431bde83 	.word	0x431bde83

08002768 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800276c:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4a04      	ldr	r2, [pc, #16]	@ (8002784 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002776:	6093      	str	r3, [r2, #8]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40007000 	.word	0x40007000

08002788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e2fe      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d075      	beq.n	8002892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a6:	4b97      	ldr	r3, [pc, #604]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b0:	4b94      	ldr	r3, [pc, #592]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	d102      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3e>
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d002      	beq.n	80027cc <HAL_RCC_OscConfig+0x44>
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d10b      	bne.n	80027e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d05b      	beq.n	8002890 <HAL_RCC_OscConfig+0x108>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d157      	bne.n	8002890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e2d9      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ec:	d106      	bne.n	80027fc <HAL_RCC_OscConfig+0x74>
 80027ee:	4b85      	ldr	r3, [pc, #532]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a84      	ldr	r2, [pc, #528]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e01d      	b.n	8002838 <HAL_RCC_OscConfig+0xb0>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x98>
 8002806:	4b7f      	ldr	r3, [pc, #508]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 800280c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4b7c      	ldr	r3, [pc, #496]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7b      	ldr	r2, [pc, #492]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 8002818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e00b      	b.n	8002838 <HAL_RCC_OscConfig+0xb0>
 8002820:	4b78      	ldr	r3, [pc, #480]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a77      	ldr	r2, [pc, #476]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 8002826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b75      	ldr	r3, [pc, #468]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a74      	ldr	r2, [pc, #464]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 8002832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fcc2 	bl	80011c8 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7fe fcbe 	bl	80011c8 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	@ 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e29e      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0xc0>
 8002866:	e014      	b.n	8002892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fcae 	bl	80011c8 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002870:	f7fe fcaa 	bl	80011c8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	@ 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e28a      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002882:	4b60      	ldr	r3, [pc, #384]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0xe8>
 800288e:	e000      	b.n	8002892 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d075      	beq.n	800298a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289e:	4b59      	ldr	r3, [pc, #356]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a8:	4b56      	ldr	r3, [pc, #344]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	d102      	bne.n	80028be <HAL_RCC_OscConfig+0x136>
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d002      	beq.n	80028c4 <HAL_RCC_OscConfig+0x13c>
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d11f      	bne.n	8002904 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_OscConfig+0x154>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e25d      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b49      	ldr	r3, [pc, #292]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	4946      	ldr	r1, [pc, #280]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028f0:	4b45      	ldr	r3, [pc, #276]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe fc1b 	bl	8001130 <HAL_InitTick>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d043      	beq.n	8002988 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e249      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d023      	beq.n	8002954 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800290c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a3c      	ldr	r2, [pc, #240]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 8002912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fc56 	bl	80011c8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002920:	f7fe fc52 	bl	80011c8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e232      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002932:	4b34      	ldr	r3, [pc, #208]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	061b      	lsls	r3, r3, #24
 800294c:	492d      	ldr	r1, [pc, #180]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
 8002952:	e01a      	b.n	800298a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002954:	4b2b      	ldr	r3, [pc, #172]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a2a      	ldr	r2, [pc, #168]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 800295a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800295e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fc32 	bl	80011c8 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7fe fc2e 	bl	80011c8 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e20e      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800297a:	4b22      	ldr	r3, [pc, #136]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1e0>
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002988:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d041      	beq.n	8002a1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01c      	beq.n	80029d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299e:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80029a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a4:	4a17      	ldr	r2, [pc, #92]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ae:	f7fe fc0b 	bl	80011c8 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b6:	f7fe fc07 	bl	80011c8 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e1e7      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80029ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0ef      	beq.n	80029b6 <HAL_RCC_OscConfig+0x22e>
 80029d6:	e020      	b.n	8002a1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80029da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029de:	4a09      	ldr	r2, [pc, #36]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7fe fbee 	bl	80011c8 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ee:	e00d      	b.n	8002a0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f0:	f7fe fbea 	bl	80011c8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d906      	bls.n	8002a0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1ca      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1ea      	bne.n	80029f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80a6 	beq.w	8002b74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a2c:	4b84      	ldr	r3, [pc, #528]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2b4>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x2b6>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b7f      	ldr	r3, [pc, #508]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	4a7e      	ldr	r2, [pc, #504]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5e:	4b79      	ldr	r3, [pc, #484]	@ (8002c44 <HAL_RCC_OscConfig+0x4bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d118      	bne.n	8002a9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a6a:	4b76      	ldr	r3, [pc, #472]	@ (8002c44 <HAL_RCC_OscConfig+0x4bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a75      	ldr	r2, [pc, #468]	@ (8002c44 <HAL_RCC_OscConfig+0x4bc>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fba7 	bl	80011c8 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7e:	f7fe fba3 	bl	80011c8 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e183      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a90:	4b6c      	ldr	r3, [pc, #432]	@ (8002c44 <HAL_RCC_OscConfig+0x4bc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d108      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x32e>
 8002aa4:	4b66      	ldr	r3, [pc, #408]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aaa:	4a65      	ldr	r2, [pc, #404]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ab4:	e024      	b.n	8002b00 <HAL_RCC_OscConfig+0x378>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d110      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x358>
 8002abe:	4b60      	ldr	r3, [pc, #384]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac4:	4a5e      	ldr	r2, [pc, #376]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ace:	4b5c      	ldr	r3, [pc, #368]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad4:	4a5a      	ldr	r2, [pc, #360]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ade:	e00f      	b.n	8002b00 <HAL_RCC_OscConfig+0x378>
 8002ae0:	4b57      	ldr	r3, [pc, #348]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae6:	4a56      	ldr	r2, [pc, #344]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002af0:	4b53      	ldr	r3, [pc, #332]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af6:	4a52      	ldr	r2, [pc, #328]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d016      	beq.n	8002b36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe fb5e 	bl	80011c8 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7fe fb5a 	bl	80011c8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e138      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b26:	4b46      	ldr	r3, [pc, #280]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ed      	beq.n	8002b10 <HAL_RCC_OscConfig+0x388>
 8002b34:	e015      	b.n	8002b62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b36:	f7fe fb47 	bl	80011c8 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe fb43 	bl	80011c8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e121      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b54:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1ed      	bne.n	8002b3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b62:	7ffb      	ldrb	r3, [r7, #31]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b68:	4b35      	ldr	r3, [pc, #212]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6c:	4a34      	ldr	r2, [pc, #208]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d03c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01c      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b88:	4b2d      	ldr	r3, [pc, #180]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe fb16 	bl	80011c8 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ba0:	f7fe fb12 	bl	80011c8 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0f2      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bb2:	4b23      	ldr	r3, [pc, #140]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ef      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x418>
 8002bc0:	e01b      	b.n	8002bfa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd2:	f7fe faf9 	bl	80011c8 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bda:	f7fe faf5 	bl	80011c8 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0d5      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bec:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ef      	bne.n	8002bda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 80c9 	beq.w	8002d96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c04:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b0c      	cmp	r3, #12
 8002c0e:	f000 8083 	beq.w	8002d18 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d15e      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a08      	ldr	r2, [pc, #32]	@ (8002c40 <HAL_RCC_OscConfig+0x4b8>)
 8002c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe facf 	bl	80011c8 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c2c:	e00c      	b.n	8002c48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2e:	f7fe facb 	bl	80011c8 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d905      	bls.n	8002c48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0ab      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c48:	4b55      	ldr	r3, [pc, #340]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ec      	bne.n	8002c2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c54:	4b52      	ldr	r3, [pc, #328]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	4b52      	ldr	r3, [pc, #328]	@ (8002da4 <HAL_RCC_OscConfig+0x61c>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6a11      	ldr	r1, [r2, #32]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c64:	3a01      	subs	r2, #1
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	4311      	orrs	r1, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c6e:	0212      	lsls	r2, r2, #8
 8002c70:	4311      	orrs	r1, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c76:	0852      	lsrs	r2, r2, #1
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	0552      	lsls	r2, r2, #21
 8002c7c:	4311      	orrs	r1, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c82:	0852      	lsrs	r2, r2, #1
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0652      	lsls	r2, r2, #25
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c8e:	06d2      	lsls	r2, r2, #27
 8002c90:	430a      	orrs	r2, r1
 8002c92:	4943      	ldr	r1, [pc, #268]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b41      	ldr	r3, [pc, #260]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a40      	ldr	r2, [pc, #256]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ca2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a3d      	ldr	r2, [pc, #244]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fa8a 	bl	80011c8 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe fa86 	bl	80011c8 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e066      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cca:	4b35      	ldr	r3, [pc, #212]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x530>
 8002cd6:	e05e      	b.n	8002d96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd8:	4b31      	ldr	r3, [pc, #196]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a30      	ldr	r2, [pc, #192]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fa70 	bl	80011c8 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe fa6c 	bl	80011c8 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e04c      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cfe:	4b28      	ldr	r3, [pc, #160]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d0a:	4b25      	ldr	r3, [pc, #148]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	4924      	ldr	r1, [pc, #144]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002d10:	4b25      	ldr	r3, [pc, #148]	@ (8002da8 <HAL_RCC_OscConfig+0x620>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	60cb      	str	r3, [r1, #12]
 8002d16:	e03e      	b.n	8002d96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e039      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d24:	4b1e      	ldr	r3, [pc, #120]	@ (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0203 	and.w	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d12c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	3b01      	subs	r3, #1
 8002d44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d123      	bne.n	8002d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d11b      	bne.n	8002d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d113      	bne.n	8002d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	3b01      	subs	r3, #1
 8002d78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	019f800c 	.word	0x019f800c
 8002da8:	feeefffc 	.word	0xfeeefffc

08002dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e11e      	b.n	8003002 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b91      	ldr	r3, [pc, #580]	@ (800300c <HAL_RCC_ClockConfig+0x260>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d910      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b8e      	ldr	r3, [pc, #568]	@ (800300c <HAL_RCC_ClockConfig+0x260>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 020f 	bic.w	r2, r3, #15
 8002dda:	498c      	ldr	r1, [pc, #560]	@ (800300c <HAL_RCC_ClockConfig+0x260>)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b8a      	ldr	r3, [pc, #552]	@ (800300c <HAL_RCC_ClockConfig+0x260>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e106      	b.n	8003002 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d073      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d129      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e08:	4b81      	ldr	r3, [pc, #516]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0f4      	b.n	8003002 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e18:	f000 f99e 	bl	8003158 <RCC_GetSysClockFreqFromPLLSource>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4a7c      	ldr	r2, [pc, #496]	@ (8003014 <HAL_RCC_ClockConfig+0x268>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d93f      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e26:	4b7a      	ldr	r3, [pc, #488]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d033      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d12f      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e46:	4b72      	ldr	r3, [pc, #456]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e4e:	4a70      	ldr	r2, [pc, #448]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e56:	2380      	movs	r3, #128	@ 0x80
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e024      	b.n	8002ea6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e64:	4b6a      	ldr	r3, [pc, #424]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d109      	bne.n	8002e84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0c6      	b.n	8003002 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e74:	4b66      	ldr	r3, [pc, #408]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0be      	b.n	8003002 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e84:	f000 f8ce 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4a61      	ldr	r2, [pc, #388]	@ (8003014 <HAL_RCC_ClockConfig+0x268>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d909      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e92:	4b5f      	ldr	r3, [pc, #380]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e9a:	4a5d      	ldr	r2, [pc, #372]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ea0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ea2:	2380      	movs	r3, #128	@ 0x80
 8002ea4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4957      	ldr	r1, [pc, #348]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb8:	f7fe f986 	bl	80011c8 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7fe f982 	bl	80011c8 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e095      	b.n	8003002 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d023      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f00:	4b43      	ldr	r3, [pc, #268]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a42      	ldr	r2, [pc, #264]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002f06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f18:	4b3d      	ldr	r3, [pc, #244]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f20:	4a3b      	ldr	r2, [pc, #236]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002f22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4936      	ldr	r1, [pc, #216]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b80      	cmp	r3, #128	@ 0x80
 8002f40:	d105      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f42:	4b33      	ldr	r3, [pc, #204]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	4a32      	ldr	r2, [pc, #200]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002f48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800300c <HAL_RCC_ClockConfig+0x260>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d21d      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800300c <HAL_RCC_ClockConfig+0x260>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 020f 	bic.w	r2, r3, #15
 8002f64:	4929      	ldr	r1, [pc, #164]	@ (800300c <HAL_RCC_ClockConfig+0x260>)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f6c:	f7fe f92c 	bl	80011c8 <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f74:	f7fe f928 	bl	80011c8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e03b      	b.n	8003002 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b20      	ldr	r3, [pc, #128]	@ (800300c <HAL_RCC_ClockConfig+0x260>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d1ed      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4917      	ldr	r1, [pc, #92]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc2:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	490f      	ldr	r1, [pc, #60]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fd6:	f000 f825 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <HAL_RCC_ClockConfig+0x264>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	490c      	ldr	r1, [pc, #48]	@ (8003018 <HAL_RCC_ClockConfig+0x26c>)
 8002fe8:	5ccb      	ldrb	r3, [r1, r3]
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <HAL_RCC_ClockConfig+0x270>)
 8002ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_RCC_ClockConfig+0x274>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe f898 	bl	8001130 <HAL_InitTick>
 8003000:	4603      	mov	r3, r0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40022000 	.word	0x40022000
 8003010:	40021000 	.word	0x40021000
 8003014:	04c4b400 	.word	0x04c4b400
 8003018:	08006500 	.word	0x08006500
 800301c:	20000008 	.word	0x20000008
 8003020:	2000000c 	.word	0x2000000c

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800302a:	4b2c      	ldr	r3, [pc, #176]	@ (80030dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d102      	bne.n	800303c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003036:	4b2a      	ldr	r3, [pc, #168]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	e047      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800303c:	4b27      	ldr	r3, [pc, #156]	@ (80030dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d102      	bne.n	800304e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003048:	4b26      	ldr	r3, [pc, #152]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	e03e      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800304e:	4b23      	ldr	r3, [pc, #140]	@ (80030dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d136      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800305a:	4b20      	ldr	r3, [pc, #128]	@ (80030dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003064:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	3301      	adds	r3, #1
 8003070:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d10c      	bne.n	8003092 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003078:	4a1a      	ldr	r2, [pc, #104]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	4a16      	ldr	r2, [pc, #88]	@ (80030dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003082:	68d2      	ldr	r2, [r2, #12]
 8003084:	0a12      	lsrs	r2, r2, #8
 8003086:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	617b      	str	r3, [r7, #20]
      break;
 8003090:	e00c      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003092:	4a13      	ldr	r2, [pc, #76]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	4a10      	ldr	r2, [pc, #64]	@ (80030dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800309c:	68d2      	ldr	r2, [r2, #12]
 800309e:	0a12      	lsrs	r2, r2, #8
 80030a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030a4:	fb02 f303 	mul.w	r3, r2, r3
 80030a8:	617b      	str	r3, [r7, #20]
      break;
 80030aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030ac:	4b0b      	ldr	r3, [pc, #44]	@ (80030dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	0e5b      	lsrs	r3, r3, #25
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	3301      	adds	r3, #1
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	e001      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030cc:	693b      	ldr	r3, [r7, #16]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	00f42400 	.word	0x00f42400
 80030e4:	007a1200 	.word	0x007a1200

080030e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ec:	4b03      	ldr	r3, [pc, #12]	@ (80030fc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000008 	.word	0x20000008

08003100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003104:	f7ff fff0 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4904      	ldr	r1, [pc, #16]	@ (8003128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	08006510 	.word	0x08006510

0800312c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003130:	f7ff ffda 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0adb      	lsrs	r3, r3, #11
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4904      	ldr	r1, [pc, #16]	@ (8003154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	08006510 	.word	0x08006510

08003158 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800315e:	4b1e      	ldr	r3, [pc, #120]	@ (80031d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003168:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	3301      	adds	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d10c      	bne.n	8003196 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800317c:	4a17      	ldr	r2, [pc, #92]	@ (80031dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	4a14      	ldr	r2, [pc, #80]	@ (80031d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003186:	68d2      	ldr	r2, [r2, #12]
 8003188:	0a12      	lsrs	r2, r2, #8
 800318a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	617b      	str	r3, [r7, #20]
    break;
 8003194:	e00c      	b.n	80031b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003196:	4a12      	ldr	r2, [pc, #72]	@ (80031e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	4a0e      	ldr	r2, [pc, #56]	@ (80031d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031a0:	68d2      	ldr	r2, [r2, #12]
 80031a2:	0a12      	lsrs	r2, r2, #8
 80031a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	617b      	str	r3, [r7, #20]
    break;
 80031ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031b0:	4b09      	ldr	r3, [pc, #36]	@ (80031d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0e5b      	lsrs	r3, r3, #25
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	3301      	adds	r3, #1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80031ca:	687b      	ldr	r3, [r7, #4]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	40021000 	.word	0x40021000
 80031dc:	007a1200 	.word	0x007a1200
 80031e0:	00f42400 	.word	0x00f42400

080031e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031ec:	2300      	movs	r3, #0
 80031ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f0:	2300      	movs	r3, #0
 80031f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8098 	beq.w	8003332 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003206:	4b43      	ldr	r3, [pc, #268]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10d      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	4b40      	ldr	r3, [pc, #256]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	4a3f      	ldr	r2, [pc, #252]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800321c:	6593      	str	r3, [r2, #88]	@ 0x58
 800321e:	4b3d      	ldr	r3, [pc, #244]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	2301      	movs	r3, #1
 800322c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800322e:	4b3a      	ldr	r3, [pc, #232]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a39      	ldr	r2, [pc, #228]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003238:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800323a:	f7fd ffc5 	bl	80011c8 <HAL_GetTick>
 800323e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003240:	e009      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003242:	f7fd ffc1 	bl	80011c8 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d902      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	74fb      	strb	r3, [r7, #19]
        break;
 8003254:	e005      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003256:	4b30      	ldr	r3, [pc, #192]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ef      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003262:	7cfb      	ldrb	r3, [r7, #19]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d159      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003268:	4b2a      	ldr	r3, [pc, #168]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003272:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01e      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	429a      	cmp	r2, r3
 8003282:	d019      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003284:	4b23      	ldr	r3, [pc, #140]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800328e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003290:	4b20      	ldr	r3, [pc, #128]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003296:	4a1f      	ldr	r2, [pc, #124]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032b0:	4a18      	ldr	r2, [pc, #96]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fd ff81 	bl	80011c8 <HAL_GetTick>
 80032c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c8:	e00b      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fd ff7d 	bl	80011c8 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d902      	bls.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	74fb      	strb	r3, [r7, #19]
            break;
 80032e0:	e006      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ec      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f6:	4b07      	ldr	r3, [pc, #28]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003304:	4903      	ldr	r1, [pc, #12]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800330c:	e008      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	74bb      	strb	r3, [r7, #18]
 8003312:	e005      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003314:	40021000 	.word	0x40021000
 8003318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003320:	7c7b      	ldrb	r3, [r7, #17]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d105      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003326:	4ba7      	ldr	r3, [pc, #668]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332a:	4aa6      	ldr	r2, [pc, #664]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003330:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800333e:	4ba1      	ldr	r3, [pc, #644]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003344:	f023 0203 	bic.w	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	499d      	ldr	r1, [pc, #628]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003360:	4b98      	ldr	r3, [pc, #608]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003366:	f023 020c 	bic.w	r2, r3, #12
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4995      	ldr	r1, [pc, #596]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003382:	4b90      	ldr	r3, [pc, #576]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003388:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	498c      	ldr	r1, [pc, #560]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033a4:	4b87      	ldr	r3, [pc, #540]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	4984      	ldr	r1, [pc, #528]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033c6:	4b7f      	ldr	r3, [pc, #508]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	497b      	ldr	r1, [pc, #492]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033e8:	4b76      	ldr	r3, [pc, #472]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	4973      	ldr	r1, [pc, #460]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800340a:	4b6e      	ldr	r3, [pc, #440]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003410:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	496a      	ldr	r1, [pc, #424]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800342c:	4b65      	ldr	r3, [pc, #404]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003432:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4962      	ldr	r1, [pc, #392]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800344e:	4b5d      	ldr	r3, [pc, #372]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003454:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	4959      	ldr	r1, [pc, #356]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003470:	4b54      	ldr	r3, [pc, #336]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003472:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003476:	f023 0203 	bic.w	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347e:	4951      	ldr	r1, [pc, #324]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003492:	4b4c      	ldr	r3, [pc, #304]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003498:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a0:	4948      	ldr	r1, [pc, #288]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d015      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b4:	4b43      	ldr	r3, [pc, #268]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	4940      	ldr	r1, [pc, #256]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034d2:	d105      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d4:	4b3b      	ldr	r3, [pc, #236]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a3a      	ldr	r2, [pc, #232]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034ec:	4b35      	ldr	r3, [pc, #212]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034fa:	4932      	ldr	r1, [pc, #200]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003506:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800350a:	d105      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800350c:	4b2d      	ldr	r3, [pc, #180]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a2c      	ldr	r2, [pc, #176]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003516:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d015      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003524:	4b27      	ldr	r3, [pc, #156]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003532:	4924      	ldr	r1, [pc, #144]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003542:	d105      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003544:	4b1f      	ldr	r3, [pc, #124]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a1e      	ldr	r2, [pc, #120]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800354e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d015      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800355c:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003562:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356a:	4916      	ldr	r1, [pc, #88]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003576:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800357a:	d105      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800357c:	4b11      	ldr	r3, [pc, #68]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4a10      	ldr	r2, [pc, #64]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003586:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d019      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003594:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	4908      	ldr	r1, [pc, #32]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035b2:	d109      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b4:	4b03      	ldr	r3, [pc, #12]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4a02      	ldr	r2, [pc, #8]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035be:	60d3      	str	r3, [r2, #12]
 80035c0:	e002      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d015      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035d4:	4b29      	ldr	r3, [pc, #164]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	4926      	ldr	r1, [pc, #152]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035f2:	d105      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035f4:	4b21      	ldr	r3, [pc, #132]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a20      	ldr	r2, [pc, #128]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d015      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800360c:	4b1b      	ldr	r3, [pc, #108]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361a:	4918      	ldr	r1, [pc, #96]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362a:	d105      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800362c:	4b13      	ldr	r3, [pc, #76]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a12      	ldr	r2, [pc, #72]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003636:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d015      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003644:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003646:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800364a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003652:	490a      	ldr	r1, [pc, #40]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003662:	d105      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003664:	4b05      	ldr	r3, [pc, #20]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4a04      	ldr	r2, [pc, #16]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800366a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800366e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003670:	7cbb      	ldrb	r3, [r7, #18]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000

08003680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e049      	b.n	8003726 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd fb88 	bl	8000dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 fa26 	bl	8003b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d001      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e054      	b.n	80037f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a26      	ldr	r2, [pc, #152]	@ (8003800 <HAL_TIM_Base_Start_IT+0xd0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d022      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003772:	d01d      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a22      	ldr	r2, [pc, #136]	@ (8003804 <HAL_TIM_Base_Start_IT+0xd4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d018      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a21      	ldr	r2, [pc, #132]	@ (8003808 <HAL_TIM_Base_Start_IT+0xd8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1f      	ldr	r2, [pc, #124]	@ (800380c <HAL_TIM_Base_Start_IT+0xdc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00e      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1e      	ldr	r2, [pc, #120]	@ (8003810 <HAL_TIM_Base_Start_IT+0xe0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003814 <HAL_TIM_Base_Start_IT+0xe4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003818 <HAL_TIM_Base_Start_IT+0xe8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d115      	bne.n	80037dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	4b19      	ldr	r3, [pc, #100]	@ (800381c <HAL_TIM_Base_Start_IT+0xec>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b06      	cmp	r3, #6
 80037c0:	d015      	beq.n	80037ee <HAL_TIM_Base_Start_IT+0xbe>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c8:	d011      	beq.n	80037ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0201 	orr.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037da:	e008      	b.n	80037ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e000      	b.n	80037f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40000c00 	.word	0x40000c00
 8003810:	40013400 	.word	0x40013400
 8003814:	40014000 	.word	0x40014000
 8003818:	40015000 	.word	0x40015000
 800381c:	00010007 	.word	0x00010007

08003820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d020      	beq.n	8003884 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01b      	beq.n	8003884 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0202 	mvn.w	r2, #2
 8003854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f931 	bl	8003ad2 <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f923 	bl	8003abe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f934 	bl	8003ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d020      	beq.n	80038d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01b      	beq.n	80038d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0204 	mvn.w	r2, #4
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f90b 	bl	8003ad2 <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8fd 	bl	8003abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f90e 	bl	8003ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d020      	beq.n	800391c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01b      	beq.n	800391c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0208 	mvn.w	r2, #8
 80038ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2204      	movs	r2, #4
 80038f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f8e5 	bl	8003ad2 <HAL_TIM_IC_CaptureCallback>
 8003908:	e005      	b.n	8003916 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f8d7 	bl	8003abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f8e8 	bl	8003ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d020      	beq.n	8003968 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01b      	beq.n	8003968 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0210 	mvn.w	r2, #16
 8003938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2208      	movs	r2, #8
 800393e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8bf 	bl	8003ad2 <HAL_TIM_IC_CaptureCallback>
 8003954:	e005      	b.n	8003962 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f8b1 	bl	8003abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f8c2 	bl	8003ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00c      	beq.n	800398c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0201 	mvn.w	r2, #1
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fc fe12 	bl	80005b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00c      	beq.n	80039ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80039b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f9ff 	bl	8003db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00c      	beq.n	80039de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80039d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f9f7 	bl	8003dcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00c      	beq.n	8003a02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f87c 	bl	8003afa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00c      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f06f 0220 	mvn.w	r2, #32
 8003a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f9bf 	bl	8003da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00c      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f9cb 	bl	8003de0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00c      	beq.n	8003a6e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f9c3 	bl	8003df4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00c      	beq.n	8003a92 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f9bb 	bl	8003e08 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f9b3 	bl	8003e1c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a4c      	ldr	r2, [pc, #304]	@ (8003c54 <TIM_Base_SetConfig+0x144>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d017      	beq.n	8003b58 <TIM_Base_SetConfig+0x48>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2e:	d013      	beq.n	8003b58 <TIM_Base_SetConfig+0x48>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a49      	ldr	r2, [pc, #292]	@ (8003c58 <TIM_Base_SetConfig+0x148>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00f      	beq.n	8003b58 <TIM_Base_SetConfig+0x48>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a48      	ldr	r2, [pc, #288]	@ (8003c5c <TIM_Base_SetConfig+0x14c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00b      	beq.n	8003b58 <TIM_Base_SetConfig+0x48>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a47      	ldr	r2, [pc, #284]	@ (8003c60 <TIM_Base_SetConfig+0x150>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d007      	beq.n	8003b58 <TIM_Base_SetConfig+0x48>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a46      	ldr	r2, [pc, #280]	@ (8003c64 <TIM_Base_SetConfig+0x154>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_Base_SetConfig+0x48>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a45      	ldr	r2, [pc, #276]	@ (8003c68 <TIM_Base_SetConfig+0x158>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d108      	bne.n	8003b6a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a39      	ldr	r2, [pc, #228]	@ (8003c54 <TIM_Base_SetConfig+0x144>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d023      	beq.n	8003bba <TIM_Base_SetConfig+0xaa>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b78:	d01f      	beq.n	8003bba <TIM_Base_SetConfig+0xaa>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a36      	ldr	r2, [pc, #216]	@ (8003c58 <TIM_Base_SetConfig+0x148>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01b      	beq.n	8003bba <TIM_Base_SetConfig+0xaa>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a35      	ldr	r2, [pc, #212]	@ (8003c5c <TIM_Base_SetConfig+0x14c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d017      	beq.n	8003bba <TIM_Base_SetConfig+0xaa>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a34      	ldr	r2, [pc, #208]	@ (8003c60 <TIM_Base_SetConfig+0x150>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d013      	beq.n	8003bba <TIM_Base_SetConfig+0xaa>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a33      	ldr	r2, [pc, #204]	@ (8003c64 <TIM_Base_SetConfig+0x154>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00f      	beq.n	8003bba <TIM_Base_SetConfig+0xaa>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a33      	ldr	r2, [pc, #204]	@ (8003c6c <TIM_Base_SetConfig+0x15c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00b      	beq.n	8003bba <TIM_Base_SetConfig+0xaa>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a32      	ldr	r2, [pc, #200]	@ (8003c70 <TIM_Base_SetConfig+0x160>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d007      	beq.n	8003bba <TIM_Base_SetConfig+0xaa>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a31      	ldr	r2, [pc, #196]	@ (8003c74 <TIM_Base_SetConfig+0x164>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d003      	beq.n	8003bba <TIM_Base_SetConfig+0xaa>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8003c68 <TIM_Base_SetConfig+0x158>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d108      	bne.n	8003bcc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a18      	ldr	r2, [pc, #96]	@ (8003c54 <TIM_Base_SetConfig+0x144>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d013      	beq.n	8003c20 <TIM_Base_SetConfig+0x110>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8003c64 <TIM_Base_SetConfig+0x154>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00f      	beq.n	8003c20 <TIM_Base_SetConfig+0x110>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a1a      	ldr	r2, [pc, #104]	@ (8003c6c <TIM_Base_SetConfig+0x15c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00b      	beq.n	8003c20 <TIM_Base_SetConfig+0x110>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a19      	ldr	r2, [pc, #100]	@ (8003c70 <TIM_Base_SetConfig+0x160>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d007      	beq.n	8003c20 <TIM_Base_SetConfig+0x110>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a18      	ldr	r2, [pc, #96]	@ (8003c74 <TIM_Base_SetConfig+0x164>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_Base_SetConfig+0x110>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a13      	ldr	r2, [pc, #76]	@ (8003c68 <TIM_Base_SetConfig+0x158>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d103      	bne.n	8003c28 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f023 0201 	bic.w	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	611a      	str	r2, [r3, #16]
  }
}
 8003c46:	bf00      	nop
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800
 8003c60:	40000c00 	.word	0x40000c00
 8003c64:	40013400 	.word	0x40013400
 8003c68:	40015000 	.word	0x40015000
 8003c6c:	40014000 	.word	0x40014000
 8003c70:	40014400 	.word	0x40014400
 8003c74:	40014800 	.word	0x40014800

08003c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e074      	b.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a34      	ldr	r2, [pc, #208]	@ (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d009      	beq.n	8003cce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a33      	ldr	r2, [pc, #204]	@ (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d004      	beq.n	8003cce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a31      	ldr	r2, [pc, #196]	@ (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d108      	bne.n	8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003cd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a21      	ldr	r2, [pc, #132]	@ (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d022      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d10:	d01d      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1f      	ldr	r2, [pc, #124]	@ (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d018      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1d      	ldr	r2, [pc, #116]	@ (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00e      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a15      	ldr	r2, [pc, #84]	@ (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d009      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a18      	ldr	r2, [pc, #96]	@ (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a11      	ldr	r2, [pc, #68]	@ (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10c      	bne.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40013400 	.word	0x40013400
 8003d90:	40015000 	.word	0x40015000
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800
 8003d9c:	40000c00 	.word	0x40000c00
 8003da0:	40014000 	.word	0x40014000

08003da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e042      	b.n	8003ec8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7fc ffd7 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2224      	movs	r2, #36	@ 0x24
 8003e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fef6 	bl	8004c6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fbf7 	bl	8004674 <UART_SetConfig>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e01b      	b.n	8003ec8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 ff75 	bl	8004db0 <UART_CheckIdleState>
 8003ec6:	4603      	mov	r3, r0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	@ 0x28
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d17b      	bne.n	8003fe2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_UART_Transmit+0x26>
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e074      	b.n	8003fe4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2221      	movs	r2, #33	@ 0x21
 8003f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f0a:	f7fd f95d 	bl	80011c8 <HAL_GetTick>
 8003f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	88fa      	ldrh	r2, [r7, #6]
 8003f14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f28:	d108      	bne.n	8003f3c <HAL_UART_Transmit+0x6c>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e003      	b.n	8003f44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f44:	e030      	b.n	8003fa8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2180      	movs	r1, #128	@ 0x80
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 ffd7 	bl	8004f04 <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e03d      	b.n	8003fe4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10b      	bne.n	8003f86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	3302      	adds	r3, #2
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	e007      	b.n	8003f96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	781a      	ldrb	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	3301      	adds	r3, #1
 8003f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1c8      	bne.n	8003f46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2140      	movs	r1, #64	@ 0x40
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 ffa0 	bl	8004f04 <UART_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e006      	b.n	8003fe4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e000      	b.n	8003fe4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
  }
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b0ba      	sub	sp, #232	@ 0xe8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004012:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004016:	f640 030f 	movw	r3, #2063	@ 0x80f
 800401a:	4013      	ands	r3, r2
 800401c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d11b      	bne.n	8004060 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 82e3 	beq.w	800461c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	4798      	blx	r3
      }
      return;
 800405e:	e2dd      	b.n	800461c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8123 	beq.w	80042b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800406a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800406e:	4b8d      	ldr	r3, [pc, #564]	@ (80042a4 <HAL_UART_IRQHandler+0x2b8>)
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004076:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800407a:	4b8b      	ldr	r3, [pc, #556]	@ (80042a8 <HAL_UART_IRQHandler+0x2bc>)
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8116 	beq.w	80042b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d011      	beq.n	80040b4 <HAL_UART_IRQHandler+0xc8>
 8004090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d011      	beq.n	80040e4 <HAL_UART_IRQHandler+0xf8>
 80040c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00b      	beq.n	80040e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2202      	movs	r2, #2
 80040d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040da:	f043 0204 	orr.w	r2, r3, #4
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d011      	beq.n	8004114 <HAL_UART_IRQHandler+0x128>
 80040f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00b      	beq.n	8004114 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2204      	movs	r2, #4
 8004102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410a:	f043 0202 	orr.w	r2, r3, #2
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d017      	beq.n	8004150 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800412c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004130:	4b5c      	ldr	r3, [pc, #368]	@ (80042a4 <HAL_UART_IRQHandler+0x2b8>)
 8004132:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00b      	beq.n	8004150 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2208      	movs	r2, #8
 800413e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004146:	f043 0208 	orr.w	r2, r3, #8
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004158:	2b00      	cmp	r3, #0
 800415a:	d012      	beq.n	8004182 <HAL_UART_IRQHandler+0x196>
 800415c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004160:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00c      	beq.n	8004182 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8249 	beq.w	8004620 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800418e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d013      	beq.n	80041c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800419a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d105      	bne.n	80041b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80041a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d6:	2b40      	cmp	r3, #64	@ 0x40
 80041d8:	d005      	beq.n	80041e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d054      	beq.n	8004290 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fef9 	bl	8004fde <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f6:	2b40      	cmp	r3, #64	@ 0x40
 80041f8:	d146      	bne.n	8004288 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3308      	adds	r3, #8
 8004200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004210:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004226:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800422a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800423e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1d9      	bne.n	80041fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800424c:	2b00      	cmp	r3, #0
 800424e:	d017      	beq.n	8004280 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004256:	4a15      	ldr	r2, [pc, #84]	@ (80042ac <HAL_UART_IRQHandler+0x2c0>)
 8004258:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004260:	4618      	mov	r0, r3
 8004262:	f7fd f925 	bl	80014b0 <HAL_DMA_Abort_IT>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d019      	beq.n	80042a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800427a:	4610      	mov	r0, r2
 800427c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427e:	e00f      	b.n	80042a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f9e1 	bl	8004648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004286:	e00b      	b.n	80042a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f9dd 	bl	8004648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428e:	e007      	b.n	80042a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f9d9 	bl	8004648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800429e:	e1bf      	b.n	8004620 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	bf00      	nop
    return;
 80042a2:	e1bd      	b.n	8004620 <HAL_UART_IRQHandler+0x634>
 80042a4:	10000001 	.word	0x10000001
 80042a8:	04000120 	.word	0x04000120
 80042ac:	080050ab 	.word	0x080050ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	f040 8153 	bne.w	8004560 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 814c 	beq.w	8004560 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8145 	beq.w	8004560 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2210      	movs	r2, #16
 80042dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e8:	2b40      	cmp	r3, #64	@ 0x40
 80042ea:	f040 80bb 	bne.w	8004464 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 818f 	beq.w	8004624 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800430c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004310:	429a      	cmp	r2, r3
 8004312:	f080 8187 	bcs.w	8004624 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800431c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	f040 8087 	bne.w	8004442 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004340:	e853 3f00 	ldrex	r3, [r3]
 8004344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004348:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800434c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004350:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800435e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004362:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800436a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1da      	bne.n	8004334 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3308      	adds	r3, #8
 8004384:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800438e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e1      	bne.n	800437e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3308      	adds	r3, #8
 80043c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e3      	bne.n	80043ba <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800440e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004410:	f023 0310 	bic.w	r3, r3, #16
 8004414:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004422:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004424:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004428:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004430:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e4      	bne.n	8004400 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc ffde 	bl	80013fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004454:	b29b      	uxth	r3, r3
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	b29b      	uxth	r3, r3
 800445a:	4619      	mov	r1, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f8fd 	bl	800465c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004462:	e0df      	b.n	8004624 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004470:	b29b      	uxth	r3, r3
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80d1 	beq.w	8004628 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004486:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80cc 	beq.w	8004628 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800449e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80044b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044b4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e4      	bne.n	8004490 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3308      	adds	r3, #8
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	623b      	str	r3, [r7, #32]
   return(result);
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80044f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e1      	bne.n	80044c6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	60fb      	str	r3, [r7, #12]
   return(result);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0310 	bic.w	r3, r3, #16
 800452a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	69b9      	ldr	r1, [r7, #24]
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	617b      	str	r3, [r7, #20]
   return(result);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e4      	bne.n	8004516 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004552:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f87f 	bl	800465c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800455e:	e063      	b.n	8004628 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00e      	beq.n	800458a <HAL_UART_IRQHandler+0x59e>
 800456c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004570:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d008      	beq.n	800458a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004580:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fdd2 	bl	800512c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004588:	e051      	b.n	800462e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d014      	beq.n	80045c0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800459a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d105      	bne.n	80045ae <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80045a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d008      	beq.n	80045c0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d03a      	beq.n	800462c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4798      	blx	r3
    }
    return;
 80045be:	e035      	b.n	800462c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <HAL_UART_IRQHandler+0x5f4>
 80045cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fd7c 	bl	80050d6 <UART_EndTransmit_IT>
    return;
 80045de:	e026      	b.n	800462e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80045e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <HAL_UART_IRQHandler+0x614>
 80045ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fdab 	bl	8005154 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045fe:	e016      	b.n	800462e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004604:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d010      	beq.n	800462e <HAL_UART_IRQHandler+0x642>
 800460c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004610:	2b00      	cmp	r3, #0
 8004612:	da0c      	bge.n	800462e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fd93 	bl	8005140 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800461a:	e008      	b.n	800462e <HAL_UART_IRQHandler+0x642>
      return;
 800461c:	bf00      	nop
 800461e:	e006      	b.n	800462e <HAL_UART_IRQHandler+0x642>
    return;
 8004620:	bf00      	nop
 8004622:	e004      	b.n	800462e <HAL_UART_IRQHandler+0x642>
      return;
 8004624:	bf00      	nop
 8004626:	e002      	b.n	800462e <HAL_UART_IRQHandler+0x642>
      return;
 8004628:	bf00      	nop
 800462a:	e000      	b.n	800462e <HAL_UART_IRQHandler+0x642>
    return;
 800462c:	bf00      	nop
  }
}
 800462e:	37e8      	adds	r7, #232	@ 0xe8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004678:	b08c      	sub	sp, #48	@ 0x30
 800467a:	af00      	add	r7, sp, #0
 800467c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	431a      	orrs	r2, r3
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	431a      	orrs	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	4313      	orrs	r3, r2
 800469a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4baa      	ldr	r3, [pc, #680]	@ (800494c <UART_SetConfig+0x2d8>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046ac:	430b      	orrs	r3, r1
 80046ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a9f      	ldr	r2, [pc, #636]	@ (8004950 <UART_SetConfig+0x2dc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d004      	beq.n	80046e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046dc:	4313      	orrs	r3, r2
 80046de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80046ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	f023 010f 	bic.w	r1, r3, #15
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a90      	ldr	r2, [pc, #576]	@ (8004954 <UART_SetConfig+0x2e0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d125      	bne.n	8004764 <UART_SetConfig+0xf0>
 8004718:	4b8f      	ldr	r3, [pc, #572]	@ (8004958 <UART_SetConfig+0x2e4>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b03      	cmp	r3, #3
 8004724:	d81a      	bhi.n	800475c <UART_SetConfig+0xe8>
 8004726:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <UART_SetConfig+0xb8>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	0800473d 	.word	0x0800473d
 8004730:	0800474d 	.word	0x0800474d
 8004734:	08004745 	.word	0x08004745
 8004738:	08004755 	.word	0x08004755
 800473c:	2301      	movs	r3, #1
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004742:	e116      	b.n	8004972 <UART_SetConfig+0x2fe>
 8004744:	2302      	movs	r3, #2
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800474a:	e112      	b.n	8004972 <UART_SetConfig+0x2fe>
 800474c:	2304      	movs	r3, #4
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004752:	e10e      	b.n	8004972 <UART_SetConfig+0x2fe>
 8004754:	2308      	movs	r3, #8
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800475a:	e10a      	b.n	8004972 <UART_SetConfig+0x2fe>
 800475c:	2310      	movs	r3, #16
 800475e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004762:	e106      	b.n	8004972 <UART_SetConfig+0x2fe>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a7c      	ldr	r2, [pc, #496]	@ (800495c <UART_SetConfig+0x2e8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d138      	bne.n	80047e0 <UART_SetConfig+0x16c>
 800476e:	4b7a      	ldr	r3, [pc, #488]	@ (8004958 <UART_SetConfig+0x2e4>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d82d      	bhi.n	80047d8 <UART_SetConfig+0x164>
 800477c:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <UART_SetConfig+0x110>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047b9 	.word	0x080047b9
 8004788:	080047d9 	.word	0x080047d9
 800478c:	080047d9 	.word	0x080047d9
 8004790:	080047d9 	.word	0x080047d9
 8004794:	080047c9 	.word	0x080047c9
 8004798:	080047d9 	.word	0x080047d9
 800479c:	080047d9 	.word	0x080047d9
 80047a0:	080047d9 	.word	0x080047d9
 80047a4:	080047c1 	.word	0x080047c1
 80047a8:	080047d9 	.word	0x080047d9
 80047ac:	080047d9 	.word	0x080047d9
 80047b0:	080047d9 	.word	0x080047d9
 80047b4:	080047d1 	.word	0x080047d1
 80047b8:	2300      	movs	r3, #0
 80047ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047be:	e0d8      	b.n	8004972 <UART_SetConfig+0x2fe>
 80047c0:	2302      	movs	r3, #2
 80047c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047c6:	e0d4      	b.n	8004972 <UART_SetConfig+0x2fe>
 80047c8:	2304      	movs	r3, #4
 80047ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ce:	e0d0      	b.n	8004972 <UART_SetConfig+0x2fe>
 80047d0:	2308      	movs	r3, #8
 80047d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047d6:	e0cc      	b.n	8004972 <UART_SetConfig+0x2fe>
 80047d8:	2310      	movs	r3, #16
 80047da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047de:	e0c8      	b.n	8004972 <UART_SetConfig+0x2fe>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a5e      	ldr	r2, [pc, #376]	@ (8004960 <UART_SetConfig+0x2ec>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d125      	bne.n	8004836 <UART_SetConfig+0x1c2>
 80047ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004958 <UART_SetConfig+0x2e4>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047f4:	2b30      	cmp	r3, #48	@ 0x30
 80047f6:	d016      	beq.n	8004826 <UART_SetConfig+0x1b2>
 80047f8:	2b30      	cmp	r3, #48	@ 0x30
 80047fa:	d818      	bhi.n	800482e <UART_SetConfig+0x1ba>
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d00a      	beq.n	8004816 <UART_SetConfig+0x1a2>
 8004800:	2b20      	cmp	r3, #32
 8004802:	d814      	bhi.n	800482e <UART_SetConfig+0x1ba>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <UART_SetConfig+0x19a>
 8004808:	2b10      	cmp	r3, #16
 800480a:	d008      	beq.n	800481e <UART_SetConfig+0x1aa>
 800480c:	e00f      	b.n	800482e <UART_SetConfig+0x1ba>
 800480e:	2300      	movs	r3, #0
 8004810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004814:	e0ad      	b.n	8004972 <UART_SetConfig+0x2fe>
 8004816:	2302      	movs	r3, #2
 8004818:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800481c:	e0a9      	b.n	8004972 <UART_SetConfig+0x2fe>
 800481e:	2304      	movs	r3, #4
 8004820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004824:	e0a5      	b.n	8004972 <UART_SetConfig+0x2fe>
 8004826:	2308      	movs	r3, #8
 8004828:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800482c:	e0a1      	b.n	8004972 <UART_SetConfig+0x2fe>
 800482e:	2310      	movs	r3, #16
 8004830:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004834:	e09d      	b.n	8004972 <UART_SetConfig+0x2fe>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a4a      	ldr	r2, [pc, #296]	@ (8004964 <UART_SetConfig+0x2f0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d125      	bne.n	800488c <UART_SetConfig+0x218>
 8004840:	4b45      	ldr	r3, [pc, #276]	@ (8004958 <UART_SetConfig+0x2e4>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004846:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800484a:	2bc0      	cmp	r3, #192	@ 0xc0
 800484c:	d016      	beq.n	800487c <UART_SetConfig+0x208>
 800484e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004850:	d818      	bhi.n	8004884 <UART_SetConfig+0x210>
 8004852:	2b80      	cmp	r3, #128	@ 0x80
 8004854:	d00a      	beq.n	800486c <UART_SetConfig+0x1f8>
 8004856:	2b80      	cmp	r3, #128	@ 0x80
 8004858:	d814      	bhi.n	8004884 <UART_SetConfig+0x210>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <UART_SetConfig+0x1f0>
 800485e:	2b40      	cmp	r3, #64	@ 0x40
 8004860:	d008      	beq.n	8004874 <UART_SetConfig+0x200>
 8004862:	e00f      	b.n	8004884 <UART_SetConfig+0x210>
 8004864:	2300      	movs	r3, #0
 8004866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800486a:	e082      	b.n	8004972 <UART_SetConfig+0x2fe>
 800486c:	2302      	movs	r3, #2
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004872:	e07e      	b.n	8004972 <UART_SetConfig+0x2fe>
 8004874:	2304      	movs	r3, #4
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800487a:	e07a      	b.n	8004972 <UART_SetConfig+0x2fe>
 800487c:	2308      	movs	r3, #8
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004882:	e076      	b.n	8004972 <UART_SetConfig+0x2fe>
 8004884:	2310      	movs	r3, #16
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800488a:	e072      	b.n	8004972 <UART_SetConfig+0x2fe>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a35      	ldr	r2, [pc, #212]	@ (8004968 <UART_SetConfig+0x2f4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d12a      	bne.n	80048ec <UART_SetConfig+0x278>
 8004896:	4b30      	ldr	r3, [pc, #192]	@ (8004958 <UART_SetConfig+0x2e4>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a4:	d01a      	beq.n	80048dc <UART_SetConfig+0x268>
 80048a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048aa:	d81b      	bhi.n	80048e4 <UART_SetConfig+0x270>
 80048ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b0:	d00c      	beq.n	80048cc <UART_SetConfig+0x258>
 80048b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b6:	d815      	bhi.n	80048e4 <UART_SetConfig+0x270>
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <UART_SetConfig+0x250>
 80048bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048c0:	d008      	beq.n	80048d4 <UART_SetConfig+0x260>
 80048c2:	e00f      	b.n	80048e4 <UART_SetConfig+0x270>
 80048c4:	2300      	movs	r3, #0
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ca:	e052      	b.n	8004972 <UART_SetConfig+0x2fe>
 80048cc:	2302      	movs	r3, #2
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048d2:	e04e      	b.n	8004972 <UART_SetConfig+0x2fe>
 80048d4:	2304      	movs	r3, #4
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048da:	e04a      	b.n	8004972 <UART_SetConfig+0x2fe>
 80048dc:	2308      	movs	r3, #8
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048e2:	e046      	b.n	8004972 <UART_SetConfig+0x2fe>
 80048e4:	2310      	movs	r3, #16
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ea:	e042      	b.n	8004972 <UART_SetConfig+0x2fe>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a17      	ldr	r2, [pc, #92]	@ (8004950 <UART_SetConfig+0x2dc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d13a      	bne.n	800496c <UART_SetConfig+0x2f8>
 80048f6:	4b18      	ldr	r3, [pc, #96]	@ (8004958 <UART_SetConfig+0x2e4>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004900:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004904:	d01a      	beq.n	800493c <UART_SetConfig+0x2c8>
 8004906:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800490a:	d81b      	bhi.n	8004944 <UART_SetConfig+0x2d0>
 800490c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004910:	d00c      	beq.n	800492c <UART_SetConfig+0x2b8>
 8004912:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004916:	d815      	bhi.n	8004944 <UART_SetConfig+0x2d0>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <UART_SetConfig+0x2b0>
 800491c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004920:	d008      	beq.n	8004934 <UART_SetConfig+0x2c0>
 8004922:	e00f      	b.n	8004944 <UART_SetConfig+0x2d0>
 8004924:	2300      	movs	r3, #0
 8004926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800492a:	e022      	b.n	8004972 <UART_SetConfig+0x2fe>
 800492c:	2302      	movs	r3, #2
 800492e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004932:	e01e      	b.n	8004972 <UART_SetConfig+0x2fe>
 8004934:	2304      	movs	r3, #4
 8004936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800493a:	e01a      	b.n	8004972 <UART_SetConfig+0x2fe>
 800493c:	2308      	movs	r3, #8
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004942:	e016      	b.n	8004972 <UART_SetConfig+0x2fe>
 8004944:	2310      	movs	r3, #16
 8004946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800494a:	e012      	b.n	8004972 <UART_SetConfig+0x2fe>
 800494c:	cfff69f3 	.word	0xcfff69f3
 8004950:	40008000 	.word	0x40008000
 8004954:	40013800 	.word	0x40013800
 8004958:	40021000 	.word	0x40021000
 800495c:	40004400 	.word	0x40004400
 8004960:	40004800 	.word	0x40004800
 8004964:	40004c00 	.word	0x40004c00
 8004968:	40005000 	.word	0x40005000
 800496c:	2310      	movs	r3, #16
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4aae      	ldr	r2, [pc, #696]	@ (8004c30 <UART_SetConfig+0x5bc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	f040 8097 	bne.w	8004aac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800497e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004982:	2b08      	cmp	r3, #8
 8004984:	d823      	bhi.n	80049ce <UART_SetConfig+0x35a>
 8004986:	a201      	add	r2, pc, #4	@ (adr r2, 800498c <UART_SetConfig+0x318>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049cf 	.word	0x080049cf
 8004994:	080049b9 	.word	0x080049b9
 8004998:	080049cf 	.word	0x080049cf
 800499c:	080049bf 	.word	0x080049bf
 80049a0:	080049cf 	.word	0x080049cf
 80049a4:	080049cf 	.word	0x080049cf
 80049a8:	080049cf 	.word	0x080049cf
 80049ac:	080049c7 	.word	0x080049c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b0:	f7fe fba6 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 80049b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049b6:	e010      	b.n	80049da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b8:	4b9e      	ldr	r3, [pc, #632]	@ (8004c34 <UART_SetConfig+0x5c0>)
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049bc:	e00d      	b.n	80049da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049be:	f7fe fb31 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 80049c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049c4:	e009      	b.n	80049da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049cc:	e005      	b.n	80049da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8130 	beq.w	8004c42 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	4a94      	ldr	r2, [pc, #592]	@ (8004c38 <UART_SetConfig+0x5c4>)
 80049e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ec:	461a      	mov	r2, r3
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	4413      	add	r3, r2
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d305      	bcc.n	8004a12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d903      	bls.n	8004a1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a18:	e113      	b.n	8004c42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	60fa      	str	r2, [r7, #12]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	4a84      	ldr	r2, [pc, #528]	@ (8004c38 <UART_SetConfig+0x5c4>)
 8004a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2200      	movs	r2, #0
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a3c:	f7fb fc40 	bl	80002c0 <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	020b      	lsls	r3, r1, #8
 8004a52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a56:	0202      	lsls	r2, r0, #8
 8004a58:	6979      	ldr	r1, [r7, #20]
 8004a5a:	6849      	ldr	r1, [r1, #4]
 8004a5c:	0849      	lsrs	r1, r1, #1
 8004a5e:	2000      	movs	r0, #0
 8004a60:	460c      	mov	r4, r1
 8004a62:	4605      	mov	r5, r0
 8004a64:	eb12 0804 	adds.w	r8, r2, r4
 8004a68:	eb43 0905 	adc.w	r9, r3, r5
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	469a      	mov	sl, r3
 8004a74:	4693      	mov	fp, r2
 8004a76:	4652      	mov	r2, sl
 8004a78:	465b      	mov	r3, fp
 8004a7a:	4640      	mov	r0, r8
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	f7fb fc1f 	bl	80002c0 <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4613      	mov	r3, r2
 8004a88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a90:	d308      	bcc.n	8004aa4 <UART_SetConfig+0x430>
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a98:	d204      	bcs.n	8004aa4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6a3a      	ldr	r2, [r7, #32]
 8004aa0:	60da      	str	r2, [r3, #12]
 8004aa2:	e0ce      	b.n	8004c42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004aaa:	e0ca      	b.n	8004c42 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ab4:	d166      	bne.n	8004b84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004ab6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d827      	bhi.n	8004b0e <UART_SetConfig+0x49a>
 8004abe:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac4 <UART_SetConfig+0x450>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004ae9 	.word	0x08004ae9
 8004ac8:	08004af1 	.word	0x08004af1
 8004acc:	08004af9 	.word	0x08004af9
 8004ad0:	08004b0f 	.word	0x08004b0f
 8004ad4:	08004aff 	.word	0x08004aff
 8004ad8:	08004b0f 	.word	0x08004b0f
 8004adc:	08004b0f 	.word	0x08004b0f
 8004ae0:	08004b0f 	.word	0x08004b0f
 8004ae4:	08004b07 	.word	0x08004b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae8:	f7fe fb0a 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8004aec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004aee:	e014      	b.n	8004b1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af0:	f7fe fb1c 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8004af4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004af6:	e010      	b.n	8004b1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af8:	4b4e      	ldr	r3, [pc, #312]	@ (8004c34 <UART_SetConfig+0x5c0>)
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004afc:	e00d      	b.n	8004b1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afe:	f7fe fa91 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8004b02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b04:	e009      	b.n	8004b1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b0c:	e005      	b.n	8004b1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8090 	beq.w	8004c42 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	4a44      	ldr	r2, [pc, #272]	@ (8004c38 <UART_SetConfig+0x5c4>)
 8004b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b34:	005a      	lsls	r2, r3, #1
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	441a      	add	r2, r3
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	2b0f      	cmp	r3, #15
 8004b4c:	d916      	bls.n	8004b7c <UART_SetConfig+0x508>
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b54:	d212      	bcs.n	8004b7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f023 030f 	bic.w	r3, r3, #15
 8004b5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	8bfb      	ldrh	r3, [r7, #30]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	8bfa      	ldrh	r2, [r7, #30]
 8004b78:	60da      	str	r2, [r3, #12]
 8004b7a:	e062      	b.n	8004c42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b82:	e05e      	b.n	8004c42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d828      	bhi.n	8004bde <UART_SetConfig+0x56a>
 8004b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b94 <UART_SetConfig+0x520>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bb9 	.word	0x08004bb9
 8004b98:	08004bc1 	.word	0x08004bc1
 8004b9c:	08004bc9 	.word	0x08004bc9
 8004ba0:	08004bdf 	.word	0x08004bdf
 8004ba4:	08004bcf 	.word	0x08004bcf
 8004ba8:	08004bdf 	.word	0x08004bdf
 8004bac:	08004bdf 	.word	0x08004bdf
 8004bb0:	08004bdf 	.word	0x08004bdf
 8004bb4:	08004bd7 	.word	0x08004bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb8:	f7fe faa2 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8004bbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bbe:	e014      	b.n	8004bea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bc0:	f7fe fab4 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8004bc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bc6:	e010      	b.n	8004bea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c34 <UART_SetConfig+0x5c0>)
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bcc:	e00d      	b.n	8004bea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bce:	f7fe fa29 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8004bd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bd4:	e009      	b.n	8004bea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bdc:	e005      	b.n	8004bea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004be8:	bf00      	nop
    }

    if (pclk != 0U)
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d028      	beq.n	8004c42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	4a10      	ldr	r2, [pc, #64]	@ (8004c38 <UART_SetConfig+0x5c4>)
 8004bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	441a      	add	r2, r3
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	2b0f      	cmp	r3, #15
 8004c18:	d910      	bls.n	8004c3c <UART_SetConfig+0x5c8>
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c20:	d20c      	bcs.n	8004c3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60da      	str	r2, [r3, #12]
 8004c2c:	e009      	b.n	8004c42 <UART_SetConfig+0x5ce>
 8004c2e:	bf00      	nop
 8004c30:	40008000 	.word	0x40008000
 8004c34:	00f42400 	.word	0x00f42400
 8004c38:	08006528 	.word	0x08006528
      }
      else
      {
        ret = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2200      	movs	r2, #0
 8004c56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c5e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3730      	adds	r7, #48	@ 0x30
 8004c66:	46bd      	mov	sp, r7
 8004c68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01a      	beq.n	8004d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d6a:	d10a      	bne.n	8004d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b098      	sub	sp, #96	@ 0x60
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dc0:	f7fc fa02 	bl	80011c8 <HAL_GetTick>
 8004dc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d12f      	bne.n	8004e34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f88e 	bl	8004f04 <UART_WaitOnFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d022      	beq.n	8004e34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e6      	bne.n	8004dee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e063      	b.n	8004efc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d149      	bne.n	8004ed6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f857 	bl	8004f04 <UART_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d03c      	beq.n	8004ed6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	623b      	str	r3, [r7, #32]
   return(result);
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e6      	bne.n	8004e5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3308      	adds	r3, #8
 8004e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eae:	61fa      	str	r2, [r7, #28]
 8004eb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	69b9      	ldr	r1, [r7, #24]
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	617b      	str	r3, [r7, #20]
   return(result);
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e012      	b.n	8004efc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3758      	adds	r7, #88	@ 0x58
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f14:	e04f      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d04b      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1e:	f7fc f953 	bl	80011c8 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d302      	bcc.n	8004f34 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e04e      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d037      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b80      	cmp	r3, #128	@ 0x80
 8004f4a:	d034      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b40      	cmp	r3, #64	@ 0x40
 8004f50:	d031      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d110      	bne.n	8004f82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2208      	movs	r2, #8
 8004f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f838 	bl	8004fde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2208      	movs	r2, #8
 8004f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e029      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f90:	d111      	bne.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f81e 	bl	8004fde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e00f      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d0a0      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b095      	sub	sp, #84	@ 0x54
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005004:	643b      	str	r3, [r7, #64]	@ 0x40
 8005006:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800500a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e6      	bne.n	8004fe6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3308      	adds	r3, #8
 800501e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	61fb      	str	r3, [r7, #28]
   return(result);
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3308      	adds	r3, #8
 800503a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800503c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800503e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e3      	bne.n	8005018 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d118      	bne.n	800508a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	60bb      	str	r3, [r7, #8]
   return(result);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0310 	bic.w	r3, r3, #16
 800506c:	647b      	str	r3, [r7, #68]	@ 0x44
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	613b      	str	r3, [r7, #16]
   return(result);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e6      	bne.n	8005058 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800509e:	bf00      	nop
 80050a0:	3754      	adds	r7, #84	@ 0x54
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff fabd 	bl	8004648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b088      	sub	sp, #32
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050f2:	61fb      	str	r3, [r7, #28]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6979      	ldr	r1, [r7, #20]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	613b      	str	r3, [r7, #16]
   return(result);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e6      	bne.n	80050de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff fa88 	bl	8004634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005124:	bf00      	nop
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_UARTEx_DisableFifoMode+0x16>
 800517a:	2302      	movs	r3, #2
 800517c:	e027      	b.n	80051ce <HAL_UARTEx_DisableFifoMode+0x66>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2224      	movs	r2, #36	@ 0x24
 800518a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80051ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e02d      	b.n	800524e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2224      	movs	r2, #36	@ 0x24
 80051fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f850 	bl	80052d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800526a:	2302      	movs	r3, #2
 800526c:	e02d      	b.n	80052ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2224      	movs	r2, #36	@ 0x24
 800527a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f812 	bl	80052d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d108      	bne.n	80052f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052f4:	e031      	b.n	800535a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052f6:	2308      	movs	r3, #8
 80052f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052fa:	2308      	movs	r3, #8
 80052fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	0e5b      	lsrs	r3, r3, #25
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	0f5b      	lsrs	r3, r3, #29
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800531e:	7bbb      	ldrb	r3, [r7, #14]
 8005320:	7b3a      	ldrb	r2, [r7, #12]
 8005322:	4911      	ldr	r1, [pc, #68]	@ (8005368 <UARTEx_SetNbDataToProcess+0x94>)
 8005324:	5c8a      	ldrb	r2, [r1, r2]
 8005326:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800532a:	7b3a      	ldrb	r2, [r7, #12]
 800532c:	490f      	ldr	r1, [pc, #60]	@ (800536c <UARTEx_SetNbDataToProcess+0x98>)
 800532e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005330:	fb93 f3f2 	sdiv	r3, r3, r2
 8005334:	b29a      	uxth	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	7b7a      	ldrb	r2, [r7, #13]
 8005340:	4909      	ldr	r1, [pc, #36]	@ (8005368 <UARTEx_SetNbDataToProcess+0x94>)
 8005342:	5c8a      	ldrb	r2, [r1, r2]
 8005344:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005348:	7b7a      	ldrb	r2, [r7, #13]
 800534a:	4908      	ldr	r1, [pc, #32]	@ (800536c <UARTEx_SetNbDataToProcess+0x98>)
 800534c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800534e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005352:	b29a      	uxth	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	08006540 	.word	0x08006540
 800536c:	08006548 	.word	0x08006548

08005370 <std>:
 8005370:	2300      	movs	r3, #0
 8005372:	b510      	push	{r4, lr}
 8005374:	4604      	mov	r4, r0
 8005376:	e9c0 3300 	strd	r3, r3, [r0]
 800537a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800537e:	6083      	str	r3, [r0, #8]
 8005380:	8181      	strh	r1, [r0, #12]
 8005382:	6643      	str	r3, [r0, #100]	@ 0x64
 8005384:	81c2      	strh	r2, [r0, #14]
 8005386:	6183      	str	r3, [r0, #24]
 8005388:	4619      	mov	r1, r3
 800538a:	2208      	movs	r2, #8
 800538c:	305c      	adds	r0, #92	@ 0x5c
 800538e:	f000 fab5 	bl	80058fc <memset>
 8005392:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <std+0x58>)
 8005394:	6263      	str	r3, [r4, #36]	@ 0x24
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <std+0x5c>)
 8005398:	62a3      	str	r3, [r4, #40]	@ 0x28
 800539a:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <std+0x60>)
 800539c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800539e:	4b0d      	ldr	r3, [pc, #52]	@ (80053d4 <std+0x64>)
 80053a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80053a2:	4b0d      	ldr	r3, [pc, #52]	@ (80053d8 <std+0x68>)
 80053a4:	6224      	str	r4, [r4, #32]
 80053a6:	429c      	cmp	r4, r3
 80053a8:	d006      	beq.n	80053b8 <std+0x48>
 80053aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053ae:	4294      	cmp	r4, r2
 80053b0:	d002      	beq.n	80053b8 <std+0x48>
 80053b2:	33d0      	adds	r3, #208	@ 0xd0
 80053b4:	429c      	cmp	r4, r3
 80053b6:	d105      	bne.n	80053c4 <std+0x54>
 80053b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c0:	f000 bb14 	b.w	80059ec <__retarget_lock_init_recursive>
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	bf00      	nop
 80053c8:	0800574d 	.word	0x0800574d
 80053cc:	0800576f 	.word	0x0800576f
 80053d0:	080057a7 	.word	0x080057a7
 80053d4:	080057cb 	.word	0x080057cb
 80053d8:	2000024c 	.word	0x2000024c

080053dc <stdio_exit_handler>:
 80053dc:	4a02      	ldr	r2, [pc, #8]	@ (80053e8 <stdio_exit_handler+0xc>)
 80053de:	4903      	ldr	r1, [pc, #12]	@ (80053ec <stdio_exit_handler+0x10>)
 80053e0:	4803      	ldr	r0, [pc, #12]	@ (80053f0 <stdio_exit_handler+0x14>)
 80053e2:	f000 b869 	b.w	80054b8 <_fwalk_sglue>
 80053e6:	bf00      	nop
 80053e8:	20000014 	.word	0x20000014
 80053ec:	0800629d 	.word	0x0800629d
 80053f0:	20000024 	.word	0x20000024

080053f4 <cleanup_stdio>:
 80053f4:	6841      	ldr	r1, [r0, #4]
 80053f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <cleanup_stdio+0x34>)
 80053f8:	4299      	cmp	r1, r3
 80053fa:	b510      	push	{r4, lr}
 80053fc:	4604      	mov	r4, r0
 80053fe:	d001      	beq.n	8005404 <cleanup_stdio+0x10>
 8005400:	f000 ff4c 	bl	800629c <_fflush_r>
 8005404:	68a1      	ldr	r1, [r4, #8]
 8005406:	4b09      	ldr	r3, [pc, #36]	@ (800542c <cleanup_stdio+0x38>)
 8005408:	4299      	cmp	r1, r3
 800540a:	d002      	beq.n	8005412 <cleanup_stdio+0x1e>
 800540c:	4620      	mov	r0, r4
 800540e:	f000 ff45 	bl	800629c <_fflush_r>
 8005412:	68e1      	ldr	r1, [r4, #12]
 8005414:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <cleanup_stdio+0x3c>)
 8005416:	4299      	cmp	r1, r3
 8005418:	d004      	beq.n	8005424 <cleanup_stdio+0x30>
 800541a:	4620      	mov	r0, r4
 800541c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005420:	f000 bf3c 	b.w	800629c <_fflush_r>
 8005424:	bd10      	pop	{r4, pc}
 8005426:	bf00      	nop
 8005428:	2000024c 	.word	0x2000024c
 800542c:	200002b4 	.word	0x200002b4
 8005430:	2000031c 	.word	0x2000031c

08005434 <global_stdio_init.part.0>:
 8005434:	b510      	push	{r4, lr}
 8005436:	4b0b      	ldr	r3, [pc, #44]	@ (8005464 <global_stdio_init.part.0+0x30>)
 8005438:	4c0b      	ldr	r4, [pc, #44]	@ (8005468 <global_stdio_init.part.0+0x34>)
 800543a:	4a0c      	ldr	r2, [pc, #48]	@ (800546c <global_stdio_init.part.0+0x38>)
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	4620      	mov	r0, r4
 8005440:	2200      	movs	r2, #0
 8005442:	2104      	movs	r1, #4
 8005444:	f7ff ff94 	bl	8005370 <std>
 8005448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800544c:	2201      	movs	r2, #1
 800544e:	2109      	movs	r1, #9
 8005450:	f7ff ff8e 	bl	8005370 <std>
 8005454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005458:	2202      	movs	r2, #2
 800545a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800545e:	2112      	movs	r1, #18
 8005460:	f7ff bf86 	b.w	8005370 <std>
 8005464:	20000384 	.word	0x20000384
 8005468:	2000024c 	.word	0x2000024c
 800546c:	080053dd 	.word	0x080053dd

08005470 <__sfp_lock_acquire>:
 8005470:	4801      	ldr	r0, [pc, #4]	@ (8005478 <__sfp_lock_acquire+0x8>)
 8005472:	f000 babc 	b.w	80059ee <__retarget_lock_acquire_recursive>
 8005476:	bf00      	nop
 8005478:	2000038d 	.word	0x2000038d

0800547c <__sfp_lock_release>:
 800547c:	4801      	ldr	r0, [pc, #4]	@ (8005484 <__sfp_lock_release+0x8>)
 800547e:	f000 bab7 	b.w	80059f0 <__retarget_lock_release_recursive>
 8005482:	bf00      	nop
 8005484:	2000038d 	.word	0x2000038d

08005488 <__sinit>:
 8005488:	b510      	push	{r4, lr}
 800548a:	4604      	mov	r4, r0
 800548c:	f7ff fff0 	bl	8005470 <__sfp_lock_acquire>
 8005490:	6a23      	ldr	r3, [r4, #32]
 8005492:	b11b      	cbz	r3, 800549c <__sinit+0x14>
 8005494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005498:	f7ff bff0 	b.w	800547c <__sfp_lock_release>
 800549c:	4b04      	ldr	r3, [pc, #16]	@ (80054b0 <__sinit+0x28>)
 800549e:	6223      	str	r3, [r4, #32]
 80054a0:	4b04      	ldr	r3, [pc, #16]	@ (80054b4 <__sinit+0x2c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1f5      	bne.n	8005494 <__sinit+0xc>
 80054a8:	f7ff ffc4 	bl	8005434 <global_stdio_init.part.0>
 80054ac:	e7f2      	b.n	8005494 <__sinit+0xc>
 80054ae:	bf00      	nop
 80054b0:	080053f5 	.word	0x080053f5
 80054b4:	20000384 	.word	0x20000384

080054b8 <_fwalk_sglue>:
 80054b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054bc:	4607      	mov	r7, r0
 80054be:	4688      	mov	r8, r1
 80054c0:	4614      	mov	r4, r2
 80054c2:	2600      	movs	r6, #0
 80054c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054c8:	f1b9 0901 	subs.w	r9, r9, #1
 80054cc:	d505      	bpl.n	80054da <_fwalk_sglue+0x22>
 80054ce:	6824      	ldr	r4, [r4, #0]
 80054d0:	2c00      	cmp	r4, #0
 80054d2:	d1f7      	bne.n	80054c4 <_fwalk_sglue+0xc>
 80054d4:	4630      	mov	r0, r6
 80054d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054da:	89ab      	ldrh	r3, [r5, #12]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d907      	bls.n	80054f0 <_fwalk_sglue+0x38>
 80054e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054e4:	3301      	adds	r3, #1
 80054e6:	d003      	beq.n	80054f0 <_fwalk_sglue+0x38>
 80054e8:	4629      	mov	r1, r5
 80054ea:	4638      	mov	r0, r7
 80054ec:	47c0      	blx	r8
 80054ee:	4306      	orrs	r6, r0
 80054f0:	3568      	adds	r5, #104	@ 0x68
 80054f2:	e7e9      	b.n	80054c8 <_fwalk_sglue+0x10>

080054f4 <iprintf>:
 80054f4:	b40f      	push	{r0, r1, r2, r3}
 80054f6:	b507      	push	{r0, r1, r2, lr}
 80054f8:	4906      	ldr	r1, [pc, #24]	@ (8005514 <iprintf+0x20>)
 80054fa:	ab04      	add	r3, sp, #16
 80054fc:	6808      	ldr	r0, [r1, #0]
 80054fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005502:	6881      	ldr	r1, [r0, #8]
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	f000 fb9f 	bl	8005c48 <_vfiprintf_r>
 800550a:	b003      	add	sp, #12
 800550c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005510:	b004      	add	sp, #16
 8005512:	4770      	bx	lr
 8005514:	20000020 	.word	0x20000020

08005518 <_puts_r>:
 8005518:	6a03      	ldr	r3, [r0, #32]
 800551a:	b570      	push	{r4, r5, r6, lr}
 800551c:	6884      	ldr	r4, [r0, #8]
 800551e:	4605      	mov	r5, r0
 8005520:	460e      	mov	r6, r1
 8005522:	b90b      	cbnz	r3, 8005528 <_puts_r+0x10>
 8005524:	f7ff ffb0 	bl	8005488 <__sinit>
 8005528:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800552a:	07db      	lsls	r3, r3, #31
 800552c:	d405      	bmi.n	800553a <_puts_r+0x22>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	0598      	lsls	r0, r3, #22
 8005532:	d402      	bmi.n	800553a <_puts_r+0x22>
 8005534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005536:	f000 fa5a 	bl	80059ee <__retarget_lock_acquire_recursive>
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	0719      	lsls	r1, r3, #28
 800553e:	d502      	bpl.n	8005546 <_puts_r+0x2e>
 8005540:	6923      	ldr	r3, [r4, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d135      	bne.n	80055b2 <_puts_r+0x9a>
 8005546:	4621      	mov	r1, r4
 8005548:	4628      	mov	r0, r5
 800554a:	f000 f981 	bl	8005850 <__swsetup_r>
 800554e:	b380      	cbz	r0, 80055b2 <_puts_r+0x9a>
 8005550:	f04f 35ff 	mov.w	r5, #4294967295
 8005554:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005556:	07da      	lsls	r2, r3, #31
 8005558:	d405      	bmi.n	8005566 <_puts_r+0x4e>
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	059b      	lsls	r3, r3, #22
 800555e:	d402      	bmi.n	8005566 <_puts_r+0x4e>
 8005560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005562:	f000 fa45 	bl	80059f0 <__retarget_lock_release_recursive>
 8005566:	4628      	mov	r0, r5
 8005568:	bd70      	pop	{r4, r5, r6, pc}
 800556a:	2b00      	cmp	r3, #0
 800556c:	da04      	bge.n	8005578 <_puts_r+0x60>
 800556e:	69a2      	ldr	r2, [r4, #24]
 8005570:	429a      	cmp	r2, r3
 8005572:	dc17      	bgt.n	80055a4 <_puts_r+0x8c>
 8005574:	290a      	cmp	r1, #10
 8005576:	d015      	beq.n	80055a4 <_puts_r+0x8c>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	6022      	str	r2, [r4, #0]
 800557e:	7019      	strb	r1, [r3, #0]
 8005580:	68a3      	ldr	r3, [r4, #8]
 8005582:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005586:	3b01      	subs	r3, #1
 8005588:	60a3      	str	r3, [r4, #8]
 800558a:	2900      	cmp	r1, #0
 800558c:	d1ed      	bne.n	800556a <_puts_r+0x52>
 800558e:	2b00      	cmp	r3, #0
 8005590:	da11      	bge.n	80055b6 <_puts_r+0x9e>
 8005592:	4622      	mov	r2, r4
 8005594:	210a      	movs	r1, #10
 8005596:	4628      	mov	r0, r5
 8005598:	f000 f91b 	bl	80057d2 <__swbuf_r>
 800559c:	3001      	adds	r0, #1
 800559e:	d0d7      	beq.n	8005550 <_puts_r+0x38>
 80055a0:	250a      	movs	r5, #10
 80055a2:	e7d7      	b.n	8005554 <_puts_r+0x3c>
 80055a4:	4622      	mov	r2, r4
 80055a6:	4628      	mov	r0, r5
 80055a8:	f000 f913 	bl	80057d2 <__swbuf_r>
 80055ac:	3001      	adds	r0, #1
 80055ae:	d1e7      	bne.n	8005580 <_puts_r+0x68>
 80055b0:	e7ce      	b.n	8005550 <_puts_r+0x38>
 80055b2:	3e01      	subs	r6, #1
 80055b4:	e7e4      	b.n	8005580 <_puts_r+0x68>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	6022      	str	r2, [r4, #0]
 80055bc:	220a      	movs	r2, #10
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	e7ee      	b.n	80055a0 <_puts_r+0x88>
	...

080055c4 <puts>:
 80055c4:	4b02      	ldr	r3, [pc, #8]	@ (80055d0 <puts+0xc>)
 80055c6:	4601      	mov	r1, r0
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	f7ff bfa5 	b.w	8005518 <_puts_r>
 80055ce:	bf00      	nop
 80055d0:	20000020 	.word	0x20000020

080055d4 <setbuf>:
 80055d4:	fab1 f281 	clz	r2, r1
 80055d8:	0952      	lsrs	r2, r2, #5
 80055da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055de:	0052      	lsls	r2, r2, #1
 80055e0:	f000 b800 	b.w	80055e4 <setvbuf>

080055e4 <setvbuf>:
 80055e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055e8:	461d      	mov	r5, r3
 80055ea:	4b57      	ldr	r3, [pc, #348]	@ (8005748 <setvbuf+0x164>)
 80055ec:	681f      	ldr	r7, [r3, #0]
 80055ee:	4604      	mov	r4, r0
 80055f0:	460e      	mov	r6, r1
 80055f2:	4690      	mov	r8, r2
 80055f4:	b127      	cbz	r7, 8005600 <setvbuf+0x1c>
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	b913      	cbnz	r3, 8005600 <setvbuf+0x1c>
 80055fa:	4638      	mov	r0, r7
 80055fc:	f7ff ff44 	bl	8005488 <__sinit>
 8005600:	f1b8 0f02 	cmp.w	r8, #2
 8005604:	d006      	beq.n	8005614 <setvbuf+0x30>
 8005606:	f1b8 0f01 	cmp.w	r8, #1
 800560a:	f200 809a 	bhi.w	8005742 <setvbuf+0x15e>
 800560e:	2d00      	cmp	r5, #0
 8005610:	f2c0 8097 	blt.w	8005742 <setvbuf+0x15e>
 8005614:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005616:	07d9      	lsls	r1, r3, #31
 8005618:	d405      	bmi.n	8005626 <setvbuf+0x42>
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	059a      	lsls	r2, r3, #22
 800561e:	d402      	bmi.n	8005626 <setvbuf+0x42>
 8005620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005622:	f000 f9e4 	bl	80059ee <__retarget_lock_acquire_recursive>
 8005626:	4621      	mov	r1, r4
 8005628:	4638      	mov	r0, r7
 800562a:	f000 fe37 	bl	800629c <_fflush_r>
 800562e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005630:	b141      	cbz	r1, 8005644 <setvbuf+0x60>
 8005632:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005636:	4299      	cmp	r1, r3
 8005638:	d002      	beq.n	8005640 <setvbuf+0x5c>
 800563a:	4638      	mov	r0, r7
 800563c:	f000 f9da 	bl	80059f4 <_free_r>
 8005640:	2300      	movs	r3, #0
 8005642:	6363      	str	r3, [r4, #52]	@ 0x34
 8005644:	2300      	movs	r3, #0
 8005646:	61a3      	str	r3, [r4, #24]
 8005648:	6063      	str	r3, [r4, #4]
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	061b      	lsls	r3, r3, #24
 800564e:	d503      	bpl.n	8005658 <setvbuf+0x74>
 8005650:	6921      	ldr	r1, [r4, #16]
 8005652:	4638      	mov	r0, r7
 8005654:	f000 f9ce 	bl	80059f4 <_free_r>
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	f1b8 0f02 	cmp.w	r8, #2
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	d061      	beq.n	800572e <setvbuf+0x14a>
 800566a:	ab01      	add	r3, sp, #4
 800566c:	466a      	mov	r2, sp
 800566e:	4621      	mov	r1, r4
 8005670:	4638      	mov	r0, r7
 8005672:	f000 fe3b 	bl	80062ec <__swhatbuf_r>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	4318      	orrs	r0, r3
 800567a:	81a0      	strh	r0, [r4, #12]
 800567c:	bb2d      	cbnz	r5, 80056ca <setvbuf+0xe6>
 800567e:	9d00      	ldr	r5, [sp, #0]
 8005680:	4628      	mov	r0, r5
 8005682:	f000 fa01 	bl	8005a88 <malloc>
 8005686:	4606      	mov	r6, r0
 8005688:	2800      	cmp	r0, #0
 800568a:	d152      	bne.n	8005732 <setvbuf+0x14e>
 800568c:	f8dd 9000 	ldr.w	r9, [sp]
 8005690:	45a9      	cmp	r9, r5
 8005692:	d140      	bne.n	8005716 <setvbuf+0x132>
 8005694:	f04f 35ff 	mov.w	r5, #4294967295
 8005698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800569c:	f043 0202 	orr.w	r2, r3, #2
 80056a0:	81a2      	strh	r2, [r4, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	60a2      	str	r2, [r4, #8]
 80056a6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80056aa:	6022      	str	r2, [r4, #0]
 80056ac:	6122      	str	r2, [r4, #16]
 80056ae:	2201      	movs	r2, #1
 80056b0:	6162      	str	r2, [r4, #20]
 80056b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80056b4:	07d6      	lsls	r6, r2, #31
 80056b6:	d404      	bmi.n	80056c2 <setvbuf+0xde>
 80056b8:	0598      	lsls	r0, r3, #22
 80056ba:	d402      	bmi.n	80056c2 <setvbuf+0xde>
 80056bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056be:	f000 f997 	bl	80059f0 <__retarget_lock_release_recursive>
 80056c2:	4628      	mov	r0, r5
 80056c4:	b003      	add	sp, #12
 80056c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056ca:	2e00      	cmp	r6, #0
 80056cc:	d0d8      	beq.n	8005680 <setvbuf+0x9c>
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	b913      	cbnz	r3, 80056d8 <setvbuf+0xf4>
 80056d2:	4638      	mov	r0, r7
 80056d4:	f7ff fed8 	bl	8005488 <__sinit>
 80056d8:	f1b8 0f01 	cmp.w	r8, #1
 80056dc:	bf08      	it	eq
 80056de:	89a3      	ldrheq	r3, [r4, #12]
 80056e0:	6026      	str	r6, [r4, #0]
 80056e2:	bf04      	itt	eq
 80056e4:	f043 0301 	orreq.w	r3, r3, #1
 80056e8:	81a3      	strheq	r3, [r4, #12]
 80056ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ee:	f013 0208 	ands.w	r2, r3, #8
 80056f2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80056f6:	d01e      	beq.n	8005736 <setvbuf+0x152>
 80056f8:	07d9      	lsls	r1, r3, #31
 80056fa:	bf41      	itttt	mi
 80056fc:	2200      	movmi	r2, #0
 80056fe:	426d      	negmi	r5, r5
 8005700:	60a2      	strmi	r2, [r4, #8]
 8005702:	61a5      	strmi	r5, [r4, #24]
 8005704:	bf58      	it	pl
 8005706:	60a5      	strpl	r5, [r4, #8]
 8005708:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800570a:	07d2      	lsls	r2, r2, #31
 800570c:	d401      	bmi.n	8005712 <setvbuf+0x12e>
 800570e:	059b      	lsls	r3, r3, #22
 8005710:	d513      	bpl.n	800573a <setvbuf+0x156>
 8005712:	2500      	movs	r5, #0
 8005714:	e7d5      	b.n	80056c2 <setvbuf+0xde>
 8005716:	4648      	mov	r0, r9
 8005718:	f000 f9b6 	bl	8005a88 <malloc>
 800571c:	4606      	mov	r6, r0
 800571e:	2800      	cmp	r0, #0
 8005720:	d0b8      	beq.n	8005694 <setvbuf+0xb0>
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005728:	81a3      	strh	r3, [r4, #12]
 800572a:	464d      	mov	r5, r9
 800572c:	e7cf      	b.n	80056ce <setvbuf+0xea>
 800572e:	2500      	movs	r5, #0
 8005730:	e7b2      	b.n	8005698 <setvbuf+0xb4>
 8005732:	46a9      	mov	r9, r5
 8005734:	e7f5      	b.n	8005722 <setvbuf+0x13e>
 8005736:	60a2      	str	r2, [r4, #8]
 8005738:	e7e6      	b.n	8005708 <setvbuf+0x124>
 800573a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800573c:	f000 f958 	bl	80059f0 <__retarget_lock_release_recursive>
 8005740:	e7e7      	b.n	8005712 <setvbuf+0x12e>
 8005742:	f04f 35ff 	mov.w	r5, #4294967295
 8005746:	e7bc      	b.n	80056c2 <setvbuf+0xde>
 8005748:	20000020 	.word	0x20000020

0800574c <__sread>:
 800574c:	b510      	push	{r4, lr}
 800574e:	460c      	mov	r4, r1
 8005750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005754:	f000 f8fc 	bl	8005950 <_read_r>
 8005758:	2800      	cmp	r0, #0
 800575a:	bfab      	itete	ge
 800575c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800575e:	89a3      	ldrhlt	r3, [r4, #12]
 8005760:	181b      	addge	r3, r3, r0
 8005762:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005766:	bfac      	ite	ge
 8005768:	6563      	strge	r3, [r4, #84]	@ 0x54
 800576a:	81a3      	strhlt	r3, [r4, #12]
 800576c:	bd10      	pop	{r4, pc}

0800576e <__swrite>:
 800576e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005772:	461f      	mov	r7, r3
 8005774:	898b      	ldrh	r3, [r1, #12]
 8005776:	05db      	lsls	r3, r3, #23
 8005778:	4605      	mov	r5, r0
 800577a:	460c      	mov	r4, r1
 800577c:	4616      	mov	r6, r2
 800577e:	d505      	bpl.n	800578c <__swrite+0x1e>
 8005780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005784:	2302      	movs	r3, #2
 8005786:	2200      	movs	r2, #0
 8005788:	f000 f8d0 	bl	800592c <_lseek_r>
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005792:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	4632      	mov	r2, r6
 800579a:	463b      	mov	r3, r7
 800579c:	4628      	mov	r0, r5
 800579e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057a2:	f000 b8e7 	b.w	8005974 <_write_r>

080057a6 <__sseek>:
 80057a6:	b510      	push	{r4, lr}
 80057a8:	460c      	mov	r4, r1
 80057aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ae:	f000 f8bd 	bl	800592c <_lseek_r>
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	89a3      	ldrh	r3, [r4, #12]
 80057b6:	bf15      	itete	ne
 80057b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80057ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80057be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057c2:	81a3      	strheq	r3, [r4, #12]
 80057c4:	bf18      	it	ne
 80057c6:	81a3      	strhne	r3, [r4, #12]
 80057c8:	bd10      	pop	{r4, pc}

080057ca <__sclose>:
 80057ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ce:	f000 b89d 	b.w	800590c <_close_r>

080057d2 <__swbuf_r>:
 80057d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d4:	460e      	mov	r6, r1
 80057d6:	4614      	mov	r4, r2
 80057d8:	4605      	mov	r5, r0
 80057da:	b118      	cbz	r0, 80057e4 <__swbuf_r+0x12>
 80057dc:	6a03      	ldr	r3, [r0, #32]
 80057de:	b90b      	cbnz	r3, 80057e4 <__swbuf_r+0x12>
 80057e0:	f7ff fe52 	bl	8005488 <__sinit>
 80057e4:	69a3      	ldr	r3, [r4, #24]
 80057e6:	60a3      	str	r3, [r4, #8]
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	071a      	lsls	r2, r3, #28
 80057ec:	d501      	bpl.n	80057f2 <__swbuf_r+0x20>
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	b943      	cbnz	r3, 8005804 <__swbuf_r+0x32>
 80057f2:	4621      	mov	r1, r4
 80057f4:	4628      	mov	r0, r5
 80057f6:	f000 f82b 	bl	8005850 <__swsetup_r>
 80057fa:	b118      	cbz	r0, 8005804 <__swbuf_r+0x32>
 80057fc:	f04f 37ff 	mov.w	r7, #4294967295
 8005800:	4638      	mov	r0, r7
 8005802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	6922      	ldr	r2, [r4, #16]
 8005808:	1a98      	subs	r0, r3, r2
 800580a:	6963      	ldr	r3, [r4, #20]
 800580c:	b2f6      	uxtb	r6, r6
 800580e:	4283      	cmp	r3, r0
 8005810:	4637      	mov	r7, r6
 8005812:	dc05      	bgt.n	8005820 <__swbuf_r+0x4e>
 8005814:	4621      	mov	r1, r4
 8005816:	4628      	mov	r0, r5
 8005818:	f000 fd40 	bl	800629c <_fflush_r>
 800581c:	2800      	cmp	r0, #0
 800581e:	d1ed      	bne.n	80057fc <__swbuf_r+0x2a>
 8005820:	68a3      	ldr	r3, [r4, #8]
 8005822:	3b01      	subs	r3, #1
 8005824:	60a3      	str	r3, [r4, #8]
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	6022      	str	r2, [r4, #0]
 800582c:	701e      	strb	r6, [r3, #0]
 800582e:	6962      	ldr	r2, [r4, #20]
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	429a      	cmp	r2, r3
 8005834:	d004      	beq.n	8005840 <__swbuf_r+0x6e>
 8005836:	89a3      	ldrh	r3, [r4, #12]
 8005838:	07db      	lsls	r3, r3, #31
 800583a:	d5e1      	bpl.n	8005800 <__swbuf_r+0x2e>
 800583c:	2e0a      	cmp	r6, #10
 800583e:	d1df      	bne.n	8005800 <__swbuf_r+0x2e>
 8005840:	4621      	mov	r1, r4
 8005842:	4628      	mov	r0, r5
 8005844:	f000 fd2a 	bl	800629c <_fflush_r>
 8005848:	2800      	cmp	r0, #0
 800584a:	d0d9      	beq.n	8005800 <__swbuf_r+0x2e>
 800584c:	e7d6      	b.n	80057fc <__swbuf_r+0x2a>
	...

08005850 <__swsetup_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4b29      	ldr	r3, [pc, #164]	@ (80058f8 <__swsetup_r+0xa8>)
 8005854:	4605      	mov	r5, r0
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	460c      	mov	r4, r1
 800585a:	b118      	cbz	r0, 8005864 <__swsetup_r+0x14>
 800585c:	6a03      	ldr	r3, [r0, #32]
 800585e:	b90b      	cbnz	r3, 8005864 <__swsetup_r+0x14>
 8005860:	f7ff fe12 	bl	8005488 <__sinit>
 8005864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005868:	0719      	lsls	r1, r3, #28
 800586a:	d422      	bmi.n	80058b2 <__swsetup_r+0x62>
 800586c:	06da      	lsls	r2, r3, #27
 800586e:	d407      	bmi.n	8005880 <__swsetup_r+0x30>
 8005870:	2209      	movs	r2, #9
 8005872:	602a      	str	r2, [r5, #0]
 8005874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005878:	81a3      	strh	r3, [r4, #12]
 800587a:	f04f 30ff 	mov.w	r0, #4294967295
 800587e:	e033      	b.n	80058e8 <__swsetup_r+0x98>
 8005880:	0758      	lsls	r0, r3, #29
 8005882:	d512      	bpl.n	80058aa <__swsetup_r+0x5a>
 8005884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005886:	b141      	cbz	r1, 800589a <__swsetup_r+0x4a>
 8005888:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800588c:	4299      	cmp	r1, r3
 800588e:	d002      	beq.n	8005896 <__swsetup_r+0x46>
 8005890:	4628      	mov	r0, r5
 8005892:	f000 f8af 	bl	80059f4 <_free_r>
 8005896:	2300      	movs	r3, #0
 8005898:	6363      	str	r3, [r4, #52]	@ 0x34
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80058a0:	81a3      	strh	r3, [r4, #12]
 80058a2:	2300      	movs	r3, #0
 80058a4:	6063      	str	r3, [r4, #4]
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	f043 0308 	orr.w	r3, r3, #8
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	6923      	ldr	r3, [r4, #16]
 80058b4:	b94b      	cbnz	r3, 80058ca <__swsetup_r+0x7a>
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80058bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058c0:	d003      	beq.n	80058ca <__swsetup_r+0x7a>
 80058c2:	4621      	mov	r1, r4
 80058c4:	4628      	mov	r0, r5
 80058c6:	f000 fd37 	bl	8006338 <__smakebuf_r>
 80058ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ce:	f013 0201 	ands.w	r2, r3, #1
 80058d2:	d00a      	beq.n	80058ea <__swsetup_r+0x9a>
 80058d4:	2200      	movs	r2, #0
 80058d6:	60a2      	str	r2, [r4, #8]
 80058d8:	6962      	ldr	r2, [r4, #20]
 80058da:	4252      	negs	r2, r2
 80058dc:	61a2      	str	r2, [r4, #24]
 80058de:	6922      	ldr	r2, [r4, #16]
 80058e0:	b942      	cbnz	r2, 80058f4 <__swsetup_r+0xa4>
 80058e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058e6:	d1c5      	bne.n	8005874 <__swsetup_r+0x24>
 80058e8:	bd38      	pop	{r3, r4, r5, pc}
 80058ea:	0799      	lsls	r1, r3, #30
 80058ec:	bf58      	it	pl
 80058ee:	6962      	ldrpl	r2, [r4, #20]
 80058f0:	60a2      	str	r2, [r4, #8]
 80058f2:	e7f4      	b.n	80058de <__swsetup_r+0x8e>
 80058f4:	2000      	movs	r0, #0
 80058f6:	e7f7      	b.n	80058e8 <__swsetup_r+0x98>
 80058f8:	20000020 	.word	0x20000020

080058fc <memset>:
 80058fc:	4402      	add	r2, r0
 80058fe:	4603      	mov	r3, r0
 8005900:	4293      	cmp	r3, r2
 8005902:	d100      	bne.n	8005906 <memset+0xa>
 8005904:	4770      	bx	lr
 8005906:	f803 1b01 	strb.w	r1, [r3], #1
 800590a:	e7f9      	b.n	8005900 <memset+0x4>

0800590c <_close_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d06      	ldr	r5, [pc, #24]	@ (8005928 <_close_r+0x1c>)
 8005910:	2300      	movs	r3, #0
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	602b      	str	r3, [r5, #0]
 8005918:	f7fb fb4b 	bl	8000fb2 <_close>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_close_r+0x1a>
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	b103      	cbz	r3, 8005926 <_close_r+0x1a>
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	20000388 	.word	0x20000388

0800592c <_lseek_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d07      	ldr	r5, [pc, #28]	@ (800594c <_lseek_r+0x20>)
 8005930:	4604      	mov	r4, r0
 8005932:	4608      	mov	r0, r1
 8005934:	4611      	mov	r1, r2
 8005936:	2200      	movs	r2, #0
 8005938:	602a      	str	r2, [r5, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	f7fb fb60 	bl	8001000 <_lseek>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_lseek_r+0x1e>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	b103      	cbz	r3, 800594a <_lseek_r+0x1e>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	20000388 	.word	0x20000388

08005950 <_read_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4d07      	ldr	r5, [pc, #28]	@ (8005970 <_read_r+0x20>)
 8005954:	4604      	mov	r4, r0
 8005956:	4608      	mov	r0, r1
 8005958:	4611      	mov	r1, r2
 800595a:	2200      	movs	r2, #0
 800595c:	602a      	str	r2, [r5, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	f7fb fb0a 	bl	8000f78 <_read>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_read_r+0x1e>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_read_r+0x1e>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20000388 	.word	0x20000388

08005974 <_write_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d07      	ldr	r5, [pc, #28]	@ (8005994 <_write_r+0x20>)
 8005978:	4604      	mov	r4, r0
 800597a:	4608      	mov	r0, r1
 800597c:	4611      	mov	r1, r2
 800597e:	2200      	movs	r2, #0
 8005980:	602a      	str	r2, [r5, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	f7fa ff84 	bl	8000890 <_write>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d102      	bne.n	8005992 <_write_r+0x1e>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	b103      	cbz	r3, 8005992 <_write_r+0x1e>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	20000388 	.word	0x20000388

08005998 <__errno>:
 8005998:	4b01      	ldr	r3, [pc, #4]	@ (80059a0 <__errno+0x8>)
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20000020 	.word	0x20000020

080059a4 <__libc_init_array>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	4d0d      	ldr	r5, [pc, #52]	@ (80059dc <__libc_init_array+0x38>)
 80059a8:	4c0d      	ldr	r4, [pc, #52]	@ (80059e0 <__libc_init_array+0x3c>)
 80059aa:	1b64      	subs	r4, r4, r5
 80059ac:	10a4      	asrs	r4, r4, #2
 80059ae:	2600      	movs	r6, #0
 80059b0:	42a6      	cmp	r6, r4
 80059b2:	d109      	bne.n	80059c8 <__libc_init_array+0x24>
 80059b4:	4d0b      	ldr	r5, [pc, #44]	@ (80059e4 <__libc_init_array+0x40>)
 80059b6:	4c0c      	ldr	r4, [pc, #48]	@ (80059e8 <__libc_init_array+0x44>)
 80059b8:	f000 fd2c 	bl	8006414 <_init>
 80059bc:	1b64      	subs	r4, r4, r5
 80059be:	10a4      	asrs	r4, r4, #2
 80059c0:	2600      	movs	r6, #0
 80059c2:	42a6      	cmp	r6, r4
 80059c4:	d105      	bne.n	80059d2 <__libc_init_array+0x2e>
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059cc:	4798      	blx	r3
 80059ce:	3601      	adds	r6, #1
 80059d0:	e7ee      	b.n	80059b0 <__libc_init_array+0xc>
 80059d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d6:	4798      	blx	r3
 80059d8:	3601      	adds	r6, #1
 80059da:	e7f2      	b.n	80059c2 <__libc_init_array+0x1e>
 80059dc:	0800658c 	.word	0x0800658c
 80059e0:	0800658c 	.word	0x0800658c
 80059e4:	0800658c 	.word	0x0800658c
 80059e8:	08006590 	.word	0x08006590

080059ec <__retarget_lock_init_recursive>:
 80059ec:	4770      	bx	lr

080059ee <__retarget_lock_acquire_recursive>:
 80059ee:	4770      	bx	lr

080059f0 <__retarget_lock_release_recursive>:
 80059f0:	4770      	bx	lr
	...

080059f4 <_free_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4605      	mov	r5, r0
 80059f8:	2900      	cmp	r1, #0
 80059fa:	d041      	beq.n	8005a80 <_free_r+0x8c>
 80059fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a00:	1f0c      	subs	r4, r1, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	bfb8      	it	lt
 8005a06:	18e4      	addlt	r4, r4, r3
 8005a08:	f000 f8e8 	bl	8005bdc <__malloc_lock>
 8005a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a84 <_free_r+0x90>)
 8005a0e:	6813      	ldr	r3, [r2, #0]
 8005a10:	b933      	cbnz	r3, 8005a20 <_free_r+0x2c>
 8005a12:	6063      	str	r3, [r4, #4]
 8005a14:	6014      	str	r4, [r2, #0]
 8005a16:	4628      	mov	r0, r5
 8005a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a1c:	f000 b8e4 	b.w	8005be8 <__malloc_unlock>
 8005a20:	42a3      	cmp	r3, r4
 8005a22:	d908      	bls.n	8005a36 <_free_r+0x42>
 8005a24:	6820      	ldr	r0, [r4, #0]
 8005a26:	1821      	adds	r1, r4, r0
 8005a28:	428b      	cmp	r3, r1
 8005a2a:	bf01      	itttt	eq
 8005a2c:	6819      	ldreq	r1, [r3, #0]
 8005a2e:	685b      	ldreq	r3, [r3, #4]
 8005a30:	1809      	addeq	r1, r1, r0
 8005a32:	6021      	streq	r1, [r4, #0]
 8005a34:	e7ed      	b.n	8005a12 <_free_r+0x1e>
 8005a36:	461a      	mov	r2, r3
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	b10b      	cbz	r3, 8005a40 <_free_r+0x4c>
 8005a3c:	42a3      	cmp	r3, r4
 8005a3e:	d9fa      	bls.n	8005a36 <_free_r+0x42>
 8005a40:	6811      	ldr	r1, [r2, #0]
 8005a42:	1850      	adds	r0, r2, r1
 8005a44:	42a0      	cmp	r0, r4
 8005a46:	d10b      	bne.n	8005a60 <_free_r+0x6c>
 8005a48:	6820      	ldr	r0, [r4, #0]
 8005a4a:	4401      	add	r1, r0
 8005a4c:	1850      	adds	r0, r2, r1
 8005a4e:	4283      	cmp	r3, r0
 8005a50:	6011      	str	r1, [r2, #0]
 8005a52:	d1e0      	bne.n	8005a16 <_free_r+0x22>
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	6053      	str	r3, [r2, #4]
 8005a5a:	4408      	add	r0, r1
 8005a5c:	6010      	str	r0, [r2, #0]
 8005a5e:	e7da      	b.n	8005a16 <_free_r+0x22>
 8005a60:	d902      	bls.n	8005a68 <_free_r+0x74>
 8005a62:	230c      	movs	r3, #12
 8005a64:	602b      	str	r3, [r5, #0]
 8005a66:	e7d6      	b.n	8005a16 <_free_r+0x22>
 8005a68:	6820      	ldr	r0, [r4, #0]
 8005a6a:	1821      	adds	r1, r4, r0
 8005a6c:	428b      	cmp	r3, r1
 8005a6e:	bf04      	itt	eq
 8005a70:	6819      	ldreq	r1, [r3, #0]
 8005a72:	685b      	ldreq	r3, [r3, #4]
 8005a74:	6063      	str	r3, [r4, #4]
 8005a76:	bf04      	itt	eq
 8005a78:	1809      	addeq	r1, r1, r0
 8005a7a:	6021      	streq	r1, [r4, #0]
 8005a7c:	6054      	str	r4, [r2, #4]
 8005a7e:	e7ca      	b.n	8005a16 <_free_r+0x22>
 8005a80:	bd38      	pop	{r3, r4, r5, pc}
 8005a82:	bf00      	nop
 8005a84:	20000394 	.word	0x20000394

08005a88 <malloc>:
 8005a88:	4b02      	ldr	r3, [pc, #8]	@ (8005a94 <malloc+0xc>)
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	f000 b825 	b.w	8005adc <_malloc_r>
 8005a92:	bf00      	nop
 8005a94:	20000020 	.word	0x20000020

08005a98 <sbrk_aligned>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	4e0f      	ldr	r6, [pc, #60]	@ (8005ad8 <sbrk_aligned+0x40>)
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	6831      	ldr	r1, [r6, #0]
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	b911      	cbnz	r1, 8005aaa <sbrk_aligned+0x12>
 8005aa4:	f000 fca6 	bl	80063f4 <_sbrk_r>
 8005aa8:	6030      	str	r0, [r6, #0]
 8005aaa:	4621      	mov	r1, r4
 8005aac:	4628      	mov	r0, r5
 8005aae:	f000 fca1 	bl	80063f4 <_sbrk_r>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d103      	bne.n	8005abe <sbrk_aligned+0x26>
 8005ab6:	f04f 34ff 	mov.w	r4, #4294967295
 8005aba:	4620      	mov	r0, r4
 8005abc:	bd70      	pop	{r4, r5, r6, pc}
 8005abe:	1cc4      	adds	r4, r0, #3
 8005ac0:	f024 0403 	bic.w	r4, r4, #3
 8005ac4:	42a0      	cmp	r0, r4
 8005ac6:	d0f8      	beq.n	8005aba <sbrk_aligned+0x22>
 8005ac8:	1a21      	subs	r1, r4, r0
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 fc92 	bl	80063f4 <_sbrk_r>
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d1f2      	bne.n	8005aba <sbrk_aligned+0x22>
 8005ad4:	e7ef      	b.n	8005ab6 <sbrk_aligned+0x1e>
 8005ad6:	bf00      	nop
 8005ad8:	20000390 	.word	0x20000390

08005adc <_malloc_r>:
 8005adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae0:	1ccd      	adds	r5, r1, #3
 8005ae2:	f025 0503 	bic.w	r5, r5, #3
 8005ae6:	3508      	adds	r5, #8
 8005ae8:	2d0c      	cmp	r5, #12
 8005aea:	bf38      	it	cc
 8005aec:	250c      	movcc	r5, #12
 8005aee:	2d00      	cmp	r5, #0
 8005af0:	4606      	mov	r6, r0
 8005af2:	db01      	blt.n	8005af8 <_malloc_r+0x1c>
 8005af4:	42a9      	cmp	r1, r5
 8005af6:	d904      	bls.n	8005b02 <_malloc_r+0x26>
 8005af8:	230c      	movs	r3, #12
 8005afa:	6033      	str	r3, [r6, #0]
 8005afc:	2000      	movs	r0, #0
 8005afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bd8 <_malloc_r+0xfc>
 8005b06:	f000 f869 	bl	8005bdc <__malloc_lock>
 8005b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b0e:	461c      	mov	r4, r3
 8005b10:	bb44      	cbnz	r4, 8005b64 <_malloc_r+0x88>
 8005b12:	4629      	mov	r1, r5
 8005b14:	4630      	mov	r0, r6
 8005b16:	f7ff ffbf 	bl	8005a98 <sbrk_aligned>
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	d158      	bne.n	8005bd2 <_malloc_r+0xf6>
 8005b20:	f8d8 4000 	ldr.w	r4, [r8]
 8005b24:	4627      	mov	r7, r4
 8005b26:	2f00      	cmp	r7, #0
 8005b28:	d143      	bne.n	8005bb2 <_malloc_r+0xd6>
 8005b2a:	2c00      	cmp	r4, #0
 8005b2c:	d04b      	beq.n	8005bc6 <_malloc_r+0xea>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	4639      	mov	r1, r7
 8005b32:	4630      	mov	r0, r6
 8005b34:	eb04 0903 	add.w	r9, r4, r3
 8005b38:	f000 fc5c 	bl	80063f4 <_sbrk_r>
 8005b3c:	4581      	cmp	r9, r0
 8005b3e:	d142      	bne.n	8005bc6 <_malloc_r+0xea>
 8005b40:	6821      	ldr	r1, [r4, #0]
 8005b42:	1a6d      	subs	r5, r5, r1
 8005b44:	4629      	mov	r1, r5
 8005b46:	4630      	mov	r0, r6
 8005b48:	f7ff ffa6 	bl	8005a98 <sbrk_aligned>
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d03a      	beq.n	8005bc6 <_malloc_r+0xea>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	442b      	add	r3, r5
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	f8d8 3000 	ldr.w	r3, [r8]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	bb62      	cbnz	r2, 8005bb8 <_malloc_r+0xdc>
 8005b5e:	f8c8 7000 	str.w	r7, [r8]
 8005b62:	e00f      	b.n	8005b84 <_malloc_r+0xa8>
 8005b64:	6822      	ldr	r2, [r4, #0]
 8005b66:	1b52      	subs	r2, r2, r5
 8005b68:	d420      	bmi.n	8005bac <_malloc_r+0xd0>
 8005b6a:	2a0b      	cmp	r2, #11
 8005b6c:	d917      	bls.n	8005b9e <_malloc_r+0xc2>
 8005b6e:	1961      	adds	r1, r4, r5
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	6025      	str	r5, [r4, #0]
 8005b74:	bf18      	it	ne
 8005b76:	6059      	strne	r1, [r3, #4]
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	bf08      	it	eq
 8005b7c:	f8c8 1000 	streq.w	r1, [r8]
 8005b80:	5162      	str	r2, [r4, r5]
 8005b82:	604b      	str	r3, [r1, #4]
 8005b84:	4630      	mov	r0, r6
 8005b86:	f000 f82f 	bl	8005be8 <__malloc_unlock>
 8005b8a:	f104 000b 	add.w	r0, r4, #11
 8005b8e:	1d23      	adds	r3, r4, #4
 8005b90:	f020 0007 	bic.w	r0, r0, #7
 8005b94:	1ac2      	subs	r2, r0, r3
 8005b96:	bf1c      	itt	ne
 8005b98:	1a1b      	subne	r3, r3, r0
 8005b9a:	50a3      	strne	r3, [r4, r2]
 8005b9c:	e7af      	b.n	8005afe <_malloc_r+0x22>
 8005b9e:	6862      	ldr	r2, [r4, #4]
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	bf0c      	ite	eq
 8005ba4:	f8c8 2000 	streq.w	r2, [r8]
 8005ba8:	605a      	strne	r2, [r3, #4]
 8005baa:	e7eb      	b.n	8005b84 <_malloc_r+0xa8>
 8005bac:	4623      	mov	r3, r4
 8005bae:	6864      	ldr	r4, [r4, #4]
 8005bb0:	e7ae      	b.n	8005b10 <_malloc_r+0x34>
 8005bb2:	463c      	mov	r4, r7
 8005bb4:	687f      	ldr	r7, [r7, #4]
 8005bb6:	e7b6      	b.n	8005b26 <_malloc_r+0x4a>
 8005bb8:	461a      	mov	r2, r3
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d1fb      	bne.n	8005bb8 <_malloc_r+0xdc>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	6053      	str	r3, [r2, #4]
 8005bc4:	e7de      	b.n	8005b84 <_malloc_r+0xa8>
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	6033      	str	r3, [r6, #0]
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f000 f80c 	bl	8005be8 <__malloc_unlock>
 8005bd0:	e794      	b.n	8005afc <_malloc_r+0x20>
 8005bd2:	6005      	str	r5, [r0, #0]
 8005bd4:	e7d6      	b.n	8005b84 <_malloc_r+0xa8>
 8005bd6:	bf00      	nop
 8005bd8:	20000394 	.word	0x20000394

08005bdc <__malloc_lock>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	@ (8005be4 <__malloc_lock+0x8>)
 8005bde:	f7ff bf06 	b.w	80059ee <__retarget_lock_acquire_recursive>
 8005be2:	bf00      	nop
 8005be4:	2000038c 	.word	0x2000038c

08005be8 <__malloc_unlock>:
 8005be8:	4801      	ldr	r0, [pc, #4]	@ (8005bf0 <__malloc_unlock+0x8>)
 8005bea:	f7ff bf01 	b.w	80059f0 <__retarget_lock_release_recursive>
 8005bee:	bf00      	nop
 8005bf0:	2000038c 	.word	0x2000038c

08005bf4 <__sfputc_r>:
 8005bf4:	6893      	ldr	r3, [r2, #8]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	b410      	push	{r4}
 8005bfc:	6093      	str	r3, [r2, #8]
 8005bfe:	da08      	bge.n	8005c12 <__sfputc_r+0x1e>
 8005c00:	6994      	ldr	r4, [r2, #24]
 8005c02:	42a3      	cmp	r3, r4
 8005c04:	db01      	blt.n	8005c0a <__sfputc_r+0x16>
 8005c06:	290a      	cmp	r1, #10
 8005c08:	d103      	bne.n	8005c12 <__sfputc_r+0x1e>
 8005c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c0e:	f7ff bde0 	b.w	80057d2 <__swbuf_r>
 8005c12:	6813      	ldr	r3, [r2, #0]
 8005c14:	1c58      	adds	r0, r3, #1
 8005c16:	6010      	str	r0, [r2, #0]
 8005c18:	7019      	strb	r1, [r3, #0]
 8005c1a:	4608      	mov	r0, r1
 8005c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <__sfputs_r>:
 8005c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c24:	4606      	mov	r6, r0
 8005c26:	460f      	mov	r7, r1
 8005c28:	4614      	mov	r4, r2
 8005c2a:	18d5      	adds	r5, r2, r3
 8005c2c:	42ac      	cmp	r4, r5
 8005c2e:	d101      	bne.n	8005c34 <__sfputs_r+0x12>
 8005c30:	2000      	movs	r0, #0
 8005c32:	e007      	b.n	8005c44 <__sfputs_r+0x22>
 8005c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c38:	463a      	mov	r2, r7
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f7ff ffda 	bl	8005bf4 <__sfputc_r>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d1f3      	bne.n	8005c2c <__sfputs_r+0xa>
 8005c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c48 <_vfiprintf_r>:
 8005c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	b09d      	sub	sp, #116	@ 0x74
 8005c50:	4614      	mov	r4, r2
 8005c52:	4698      	mov	r8, r3
 8005c54:	4606      	mov	r6, r0
 8005c56:	b118      	cbz	r0, 8005c60 <_vfiprintf_r+0x18>
 8005c58:	6a03      	ldr	r3, [r0, #32]
 8005c5a:	b90b      	cbnz	r3, 8005c60 <_vfiprintf_r+0x18>
 8005c5c:	f7ff fc14 	bl	8005488 <__sinit>
 8005c60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c62:	07d9      	lsls	r1, r3, #31
 8005c64:	d405      	bmi.n	8005c72 <_vfiprintf_r+0x2a>
 8005c66:	89ab      	ldrh	r3, [r5, #12]
 8005c68:	059a      	lsls	r2, r3, #22
 8005c6a:	d402      	bmi.n	8005c72 <_vfiprintf_r+0x2a>
 8005c6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c6e:	f7ff febe 	bl	80059ee <__retarget_lock_acquire_recursive>
 8005c72:	89ab      	ldrh	r3, [r5, #12]
 8005c74:	071b      	lsls	r3, r3, #28
 8005c76:	d501      	bpl.n	8005c7c <_vfiprintf_r+0x34>
 8005c78:	692b      	ldr	r3, [r5, #16]
 8005c7a:	b99b      	cbnz	r3, 8005ca4 <_vfiprintf_r+0x5c>
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f7ff fde6 	bl	8005850 <__swsetup_r>
 8005c84:	b170      	cbz	r0, 8005ca4 <_vfiprintf_r+0x5c>
 8005c86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c88:	07dc      	lsls	r4, r3, #31
 8005c8a:	d504      	bpl.n	8005c96 <_vfiprintf_r+0x4e>
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	b01d      	add	sp, #116	@ 0x74
 8005c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c96:	89ab      	ldrh	r3, [r5, #12]
 8005c98:	0598      	lsls	r0, r3, #22
 8005c9a:	d4f7      	bmi.n	8005c8c <_vfiprintf_r+0x44>
 8005c9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c9e:	f7ff fea7 	bl	80059f0 <__retarget_lock_release_recursive>
 8005ca2:	e7f3      	b.n	8005c8c <_vfiprintf_r+0x44>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ca8:	2320      	movs	r3, #32
 8005caa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cb2:	2330      	movs	r3, #48	@ 0x30
 8005cb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e64 <_vfiprintf_r+0x21c>
 8005cb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cbc:	f04f 0901 	mov.w	r9, #1
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	469a      	mov	sl, r3
 8005cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cc8:	b10a      	cbz	r2, 8005cce <_vfiprintf_r+0x86>
 8005cca:	2a25      	cmp	r2, #37	@ 0x25
 8005ccc:	d1f9      	bne.n	8005cc2 <_vfiprintf_r+0x7a>
 8005cce:	ebba 0b04 	subs.w	fp, sl, r4
 8005cd2:	d00b      	beq.n	8005cec <_vfiprintf_r+0xa4>
 8005cd4:	465b      	mov	r3, fp
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f7ff ffa1 	bl	8005c22 <__sfputs_r>
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	f000 80a7 	beq.w	8005e34 <_vfiprintf_r+0x1ec>
 8005ce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ce8:	445a      	add	r2, fp
 8005cea:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cec:	f89a 3000 	ldrb.w	r3, [sl]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 809f 	beq.w	8005e34 <_vfiprintf_r+0x1ec>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d00:	f10a 0a01 	add.w	sl, sl, #1
 8005d04:	9304      	str	r3, [sp, #16]
 8005d06:	9307      	str	r3, [sp, #28]
 8005d08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d0e:	4654      	mov	r4, sl
 8005d10:	2205      	movs	r2, #5
 8005d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d16:	4853      	ldr	r0, [pc, #332]	@ (8005e64 <_vfiprintf_r+0x21c>)
 8005d18:	f7fa fa82 	bl	8000220 <memchr>
 8005d1c:	9a04      	ldr	r2, [sp, #16]
 8005d1e:	b9d8      	cbnz	r0, 8005d58 <_vfiprintf_r+0x110>
 8005d20:	06d1      	lsls	r1, r2, #27
 8005d22:	bf44      	itt	mi
 8005d24:	2320      	movmi	r3, #32
 8005d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d2a:	0713      	lsls	r3, r2, #28
 8005d2c:	bf44      	itt	mi
 8005d2e:	232b      	movmi	r3, #43	@ 0x2b
 8005d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d34:	f89a 3000 	ldrb.w	r3, [sl]
 8005d38:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d3a:	d015      	beq.n	8005d68 <_vfiprintf_r+0x120>
 8005d3c:	9a07      	ldr	r2, [sp, #28]
 8005d3e:	4654      	mov	r4, sl
 8005d40:	2000      	movs	r0, #0
 8005d42:	f04f 0c0a 	mov.w	ip, #10
 8005d46:	4621      	mov	r1, r4
 8005d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d4c:	3b30      	subs	r3, #48	@ 0x30
 8005d4e:	2b09      	cmp	r3, #9
 8005d50:	d94b      	bls.n	8005dea <_vfiprintf_r+0x1a2>
 8005d52:	b1b0      	cbz	r0, 8005d82 <_vfiprintf_r+0x13a>
 8005d54:	9207      	str	r2, [sp, #28]
 8005d56:	e014      	b.n	8005d82 <_vfiprintf_r+0x13a>
 8005d58:	eba0 0308 	sub.w	r3, r0, r8
 8005d5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005d60:	4313      	orrs	r3, r2
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	46a2      	mov	sl, r4
 8005d66:	e7d2      	b.n	8005d0e <_vfiprintf_r+0xc6>
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	1d19      	adds	r1, r3, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	9103      	str	r1, [sp, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bfbb      	ittet	lt
 8005d74:	425b      	neglt	r3, r3
 8005d76:	f042 0202 	orrlt.w	r2, r2, #2
 8005d7a:	9307      	strge	r3, [sp, #28]
 8005d7c:	9307      	strlt	r3, [sp, #28]
 8005d7e:	bfb8      	it	lt
 8005d80:	9204      	strlt	r2, [sp, #16]
 8005d82:	7823      	ldrb	r3, [r4, #0]
 8005d84:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d86:	d10a      	bne.n	8005d9e <_vfiprintf_r+0x156>
 8005d88:	7863      	ldrb	r3, [r4, #1]
 8005d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d8c:	d132      	bne.n	8005df4 <_vfiprintf_r+0x1ac>
 8005d8e:	9b03      	ldr	r3, [sp, #12]
 8005d90:	1d1a      	adds	r2, r3, #4
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	9203      	str	r2, [sp, #12]
 8005d96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d9a:	3402      	adds	r4, #2
 8005d9c:	9305      	str	r3, [sp, #20]
 8005d9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e74 <_vfiprintf_r+0x22c>
 8005da2:	7821      	ldrb	r1, [r4, #0]
 8005da4:	2203      	movs	r2, #3
 8005da6:	4650      	mov	r0, sl
 8005da8:	f7fa fa3a 	bl	8000220 <memchr>
 8005dac:	b138      	cbz	r0, 8005dbe <_vfiprintf_r+0x176>
 8005dae:	9b04      	ldr	r3, [sp, #16]
 8005db0:	eba0 000a 	sub.w	r0, r0, sl
 8005db4:	2240      	movs	r2, #64	@ 0x40
 8005db6:	4082      	lsls	r2, r0
 8005db8:	4313      	orrs	r3, r2
 8005dba:	3401      	adds	r4, #1
 8005dbc:	9304      	str	r3, [sp, #16]
 8005dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dc2:	4829      	ldr	r0, [pc, #164]	@ (8005e68 <_vfiprintf_r+0x220>)
 8005dc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dc8:	2206      	movs	r2, #6
 8005dca:	f7fa fa29 	bl	8000220 <memchr>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d03f      	beq.n	8005e52 <_vfiprintf_r+0x20a>
 8005dd2:	4b26      	ldr	r3, [pc, #152]	@ (8005e6c <_vfiprintf_r+0x224>)
 8005dd4:	bb1b      	cbnz	r3, 8005e1e <_vfiprintf_r+0x1d6>
 8005dd6:	9b03      	ldr	r3, [sp, #12]
 8005dd8:	3307      	adds	r3, #7
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	3308      	adds	r3, #8
 8005de0:	9303      	str	r3, [sp, #12]
 8005de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de4:	443b      	add	r3, r7
 8005de6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de8:	e76a      	b.n	8005cc0 <_vfiprintf_r+0x78>
 8005dea:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dee:	460c      	mov	r4, r1
 8005df0:	2001      	movs	r0, #1
 8005df2:	e7a8      	b.n	8005d46 <_vfiprintf_r+0xfe>
 8005df4:	2300      	movs	r3, #0
 8005df6:	3401      	adds	r4, #1
 8005df8:	9305      	str	r3, [sp, #20]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	f04f 0c0a 	mov.w	ip, #10
 8005e00:	4620      	mov	r0, r4
 8005e02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e06:	3a30      	subs	r2, #48	@ 0x30
 8005e08:	2a09      	cmp	r2, #9
 8005e0a:	d903      	bls.n	8005e14 <_vfiprintf_r+0x1cc>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0c6      	beq.n	8005d9e <_vfiprintf_r+0x156>
 8005e10:	9105      	str	r1, [sp, #20]
 8005e12:	e7c4      	b.n	8005d9e <_vfiprintf_r+0x156>
 8005e14:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e18:	4604      	mov	r4, r0
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e7f0      	b.n	8005e00 <_vfiprintf_r+0x1b8>
 8005e1e:	ab03      	add	r3, sp, #12
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	462a      	mov	r2, r5
 8005e24:	4b12      	ldr	r3, [pc, #72]	@ (8005e70 <_vfiprintf_r+0x228>)
 8005e26:	a904      	add	r1, sp, #16
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f3af 8000 	nop.w
 8005e2e:	4607      	mov	r7, r0
 8005e30:	1c78      	adds	r0, r7, #1
 8005e32:	d1d6      	bne.n	8005de2 <_vfiprintf_r+0x19a>
 8005e34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e36:	07d9      	lsls	r1, r3, #31
 8005e38:	d405      	bmi.n	8005e46 <_vfiprintf_r+0x1fe>
 8005e3a:	89ab      	ldrh	r3, [r5, #12]
 8005e3c:	059a      	lsls	r2, r3, #22
 8005e3e:	d402      	bmi.n	8005e46 <_vfiprintf_r+0x1fe>
 8005e40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e42:	f7ff fdd5 	bl	80059f0 <__retarget_lock_release_recursive>
 8005e46:	89ab      	ldrh	r3, [r5, #12]
 8005e48:	065b      	lsls	r3, r3, #25
 8005e4a:	f53f af1f 	bmi.w	8005c8c <_vfiprintf_r+0x44>
 8005e4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e50:	e71e      	b.n	8005c90 <_vfiprintf_r+0x48>
 8005e52:	ab03      	add	r3, sp, #12
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	462a      	mov	r2, r5
 8005e58:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <_vfiprintf_r+0x228>)
 8005e5a:	a904      	add	r1, sp, #16
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f000 f879 	bl	8005f54 <_printf_i>
 8005e62:	e7e4      	b.n	8005e2e <_vfiprintf_r+0x1e6>
 8005e64:	08006550 	.word	0x08006550
 8005e68:	0800655a 	.word	0x0800655a
 8005e6c:	00000000 	.word	0x00000000
 8005e70:	08005c23 	.word	0x08005c23
 8005e74:	08006556 	.word	0x08006556

08005e78 <_printf_common>:
 8005e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	4698      	mov	r8, r3
 8005e80:	688a      	ldr	r2, [r1, #8]
 8005e82:	690b      	ldr	r3, [r1, #16]
 8005e84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bfb8      	it	lt
 8005e8c:	4613      	movlt	r3, r2
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e94:	4607      	mov	r7, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	b10a      	cbz	r2, 8005e9e <_printf_common+0x26>
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	6033      	str	r3, [r6, #0]
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	0699      	lsls	r1, r3, #26
 8005ea2:	bf42      	ittt	mi
 8005ea4:	6833      	ldrmi	r3, [r6, #0]
 8005ea6:	3302      	addmi	r3, #2
 8005ea8:	6033      	strmi	r3, [r6, #0]
 8005eaa:	6825      	ldr	r5, [r4, #0]
 8005eac:	f015 0506 	ands.w	r5, r5, #6
 8005eb0:	d106      	bne.n	8005ec0 <_printf_common+0x48>
 8005eb2:	f104 0a19 	add.w	sl, r4, #25
 8005eb6:	68e3      	ldr	r3, [r4, #12]
 8005eb8:	6832      	ldr	r2, [r6, #0]
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	42ab      	cmp	r3, r5
 8005ebe:	dc26      	bgt.n	8005f0e <_printf_common+0x96>
 8005ec0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ec4:	6822      	ldr	r2, [r4, #0]
 8005ec6:	3b00      	subs	r3, #0
 8005ec8:	bf18      	it	ne
 8005eca:	2301      	movne	r3, #1
 8005ecc:	0692      	lsls	r2, r2, #26
 8005ece:	d42b      	bmi.n	8005f28 <_printf_common+0xb0>
 8005ed0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	47c8      	blx	r9
 8005eda:	3001      	adds	r0, #1
 8005edc:	d01e      	beq.n	8005f1c <_printf_common+0xa4>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	6922      	ldr	r2, [r4, #16]
 8005ee2:	f003 0306 	and.w	r3, r3, #6
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	bf02      	ittt	eq
 8005eea:	68e5      	ldreq	r5, [r4, #12]
 8005eec:	6833      	ldreq	r3, [r6, #0]
 8005eee:	1aed      	subeq	r5, r5, r3
 8005ef0:	68a3      	ldr	r3, [r4, #8]
 8005ef2:	bf0c      	ite	eq
 8005ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ef8:	2500      	movne	r5, #0
 8005efa:	4293      	cmp	r3, r2
 8005efc:	bfc4      	itt	gt
 8005efe:	1a9b      	subgt	r3, r3, r2
 8005f00:	18ed      	addgt	r5, r5, r3
 8005f02:	2600      	movs	r6, #0
 8005f04:	341a      	adds	r4, #26
 8005f06:	42b5      	cmp	r5, r6
 8005f08:	d11a      	bne.n	8005f40 <_printf_common+0xc8>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e008      	b.n	8005f20 <_printf_common+0xa8>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4652      	mov	r2, sl
 8005f12:	4641      	mov	r1, r8
 8005f14:	4638      	mov	r0, r7
 8005f16:	47c8      	blx	r9
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d103      	bne.n	8005f24 <_printf_common+0xac>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	3501      	adds	r5, #1
 8005f26:	e7c6      	b.n	8005eb6 <_printf_common+0x3e>
 8005f28:	18e1      	adds	r1, r4, r3
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	2030      	movs	r0, #48	@ 0x30
 8005f2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f32:	4422      	add	r2, r4
 8005f34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	e7c7      	b.n	8005ed0 <_printf_common+0x58>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4622      	mov	r2, r4
 8005f44:	4641      	mov	r1, r8
 8005f46:	4638      	mov	r0, r7
 8005f48:	47c8      	blx	r9
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d0e6      	beq.n	8005f1c <_printf_common+0xa4>
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7d9      	b.n	8005f06 <_printf_common+0x8e>
	...

08005f54 <_printf_i>:
 8005f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	7e0f      	ldrb	r7, [r1, #24]
 8005f5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f5c:	2f78      	cmp	r7, #120	@ 0x78
 8005f5e:	4691      	mov	r9, r2
 8005f60:	4680      	mov	r8, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	469a      	mov	sl, r3
 8005f66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f6a:	d807      	bhi.n	8005f7c <_printf_i+0x28>
 8005f6c:	2f62      	cmp	r7, #98	@ 0x62
 8005f6e:	d80a      	bhi.n	8005f86 <_printf_i+0x32>
 8005f70:	2f00      	cmp	r7, #0
 8005f72:	f000 80d2 	beq.w	800611a <_printf_i+0x1c6>
 8005f76:	2f58      	cmp	r7, #88	@ 0x58
 8005f78:	f000 80b9 	beq.w	80060ee <_printf_i+0x19a>
 8005f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f84:	e03a      	b.n	8005ffc <_printf_i+0xa8>
 8005f86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f8a:	2b15      	cmp	r3, #21
 8005f8c:	d8f6      	bhi.n	8005f7c <_printf_i+0x28>
 8005f8e:	a101      	add	r1, pc, #4	@ (adr r1, 8005f94 <_printf_i+0x40>)
 8005f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08006001 	.word	0x08006001
 8005f9c:	08005f7d 	.word	0x08005f7d
 8005fa0:	08005f7d 	.word	0x08005f7d
 8005fa4:	08005f7d 	.word	0x08005f7d
 8005fa8:	08005f7d 	.word	0x08005f7d
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08005f7d 	.word	0x08005f7d
 8005fb4:	08005f7d 	.word	0x08005f7d
 8005fb8:	08005f7d 	.word	0x08005f7d
 8005fbc:	08005f7d 	.word	0x08005f7d
 8005fc0:	08006101 	.word	0x08006101
 8005fc4:	0800602b 	.word	0x0800602b
 8005fc8:	080060bb 	.word	0x080060bb
 8005fcc:	08005f7d 	.word	0x08005f7d
 8005fd0:	08005f7d 	.word	0x08005f7d
 8005fd4:	08006123 	.word	0x08006123
 8005fd8:	08005f7d 	.word	0x08005f7d
 8005fdc:	0800602b 	.word	0x0800602b
 8005fe0:	08005f7d 	.word	0x08005f7d
 8005fe4:	08005f7d 	.word	0x08005f7d
 8005fe8:	080060c3 	.word	0x080060c3
 8005fec:	6833      	ldr	r3, [r6, #0]
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6032      	str	r2, [r6, #0]
 8005ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ff8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e09d      	b.n	800613c <_printf_i+0x1e8>
 8006000:	6833      	ldr	r3, [r6, #0]
 8006002:	6820      	ldr	r0, [r4, #0]
 8006004:	1d19      	adds	r1, r3, #4
 8006006:	6031      	str	r1, [r6, #0]
 8006008:	0606      	lsls	r6, r0, #24
 800600a:	d501      	bpl.n	8006010 <_printf_i+0xbc>
 800600c:	681d      	ldr	r5, [r3, #0]
 800600e:	e003      	b.n	8006018 <_printf_i+0xc4>
 8006010:	0645      	lsls	r5, r0, #25
 8006012:	d5fb      	bpl.n	800600c <_printf_i+0xb8>
 8006014:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006018:	2d00      	cmp	r5, #0
 800601a:	da03      	bge.n	8006024 <_printf_i+0xd0>
 800601c:	232d      	movs	r3, #45	@ 0x2d
 800601e:	426d      	negs	r5, r5
 8006020:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006024:	4859      	ldr	r0, [pc, #356]	@ (800618c <_printf_i+0x238>)
 8006026:	230a      	movs	r3, #10
 8006028:	e011      	b.n	800604e <_printf_i+0xfa>
 800602a:	6821      	ldr	r1, [r4, #0]
 800602c:	6833      	ldr	r3, [r6, #0]
 800602e:	0608      	lsls	r0, r1, #24
 8006030:	f853 5b04 	ldr.w	r5, [r3], #4
 8006034:	d402      	bmi.n	800603c <_printf_i+0xe8>
 8006036:	0649      	lsls	r1, r1, #25
 8006038:	bf48      	it	mi
 800603a:	b2ad      	uxthmi	r5, r5
 800603c:	2f6f      	cmp	r7, #111	@ 0x6f
 800603e:	4853      	ldr	r0, [pc, #332]	@ (800618c <_printf_i+0x238>)
 8006040:	6033      	str	r3, [r6, #0]
 8006042:	bf14      	ite	ne
 8006044:	230a      	movne	r3, #10
 8006046:	2308      	moveq	r3, #8
 8006048:	2100      	movs	r1, #0
 800604a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800604e:	6866      	ldr	r6, [r4, #4]
 8006050:	60a6      	str	r6, [r4, #8]
 8006052:	2e00      	cmp	r6, #0
 8006054:	bfa2      	ittt	ge
 8006056:	6821      	ldrge	r1, [r4, #0]
 8006058:	f021 0104 	bicge.w	r1, r1, #4
 800605c:	6021      	strge	r1, [r4, #0]
 800605e:	b90d      	cbnz	r5, 8006064 <_printf_i+0x110>
 8006060:	2e00      	cmp	r6, #0
 8006062:	d04b      	beq.n	80060fc <_printf_i+0x1a8>
 8006064:	4616      	mov	r6, r2
 8006066:	fbb5 f1f3 	udiv	r1, r5, r3
 800606a:	fb03 5711 	mls	r7, r3, r1, r5
 800606e:	5dc7      	ldrb	r7, [r0, r7]
 8006070:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006074:	462f      	mov	r7, r5
 8006076:	42bb      	cmp	r3, r7
 8006078:	460d      	mov	r5, r1
 800607a:	d9f4      	bls.n	8006066 <_printf_i+0x112>
 800607c:	2b08      	cmp	r3, #8
 800607e:	d10b      	bne.n	8006098 <_printf_i+0x144>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	07df      	lsls	r7, r3, #31
 8006084:	d508      	bpl.n	8006098 <_printf_i+0x144>
 8006086:	6923      	ldr	r3, [r4, #16]
 8006088:	6861      	ldr	r1, [r4, #4]
 800608a:	4299      	cmp	r1, r3
 800608c:	bfde      	ittt	le
 800608e:	2330      	movle	r3, #48	@ 0x30
 8006090:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006094:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006098:	1b92      	subs	r2, r2, r6
 800609a:	6122      	str	r2, [r4, #16]
 800609c:	f8cd a000 	str.w	sl, [sp]
 80060a0:	464b      	mov	r3, r9
 80060a2:	aa03      	add	r2, sp, #12
 80060a4:	4621      	mov	r1, r4
 80060a6:	4640      	mov	r0, r8
 80060a8:	f7ff fee6 	bl	8005e78 <_printf_common>
 80060ac:	3001      	adds	r0, #1
 80060ae:	d14a      	bne.n	8006146 <_printf_i+0x1f2>
 80060b0:	f04f 30ff 	mov.w	r0, #4294967295
 80060b4:	b004      	add	sp, #16
 80060b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	f043 0320 	orr.w	r3, r3, #32
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	4833      	ldr	r0, [pc, #204]	@ (8006190 <_printf_i+0x23c>)
 80060c4:	2778      	movs	r7, #120	@ 0x78
 80060c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	6831      	ldr	r1, [r6, #0]
 80060ce:	061f      	lsls	r7, r3, #24
 80060d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80060d4:	d402      	bmi.n	80060dc <_printf_i+0x188>
 80060d6:	065f      	lsls	r7, r3, #25
 80060d8:	bf48      	it	mi
 80060da:	b2ad      	uxthmi	r5, r5
 80060dc:	6031      	str	r1, [r6, #0]
 80060de:	07d9      	lsls	r1, r3, #31
 80060e0:	bf44      	itt	mi
 80060e2:	f043 0320 	orrmi.w	r3, r3, #32
 80060e6:	6023      	strmi	r3, [r4, #0]
 80060e8:	b11d      	cbz	r5, 80060f2 <_printf_i+0x19e>
 80060ea:	2310      	movs	r3, #16
 80060ec:	e7ac      	b.n	8006048 <_printf_i+0xf4>
 80060ee:	4827      	ldr	r0, [pc, #156]	@ (800618c <_printf_i+0x238>)
 80060f0:	e7e9      	b.n	80060c6 <_printf_i+0x172>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	f023 0320 	bic.w	r3, r3, #32
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	e7f6      	b.n	80060ea <_printf_i+0x196>
 80060fc:	4616      	mov	r6, r2
 80060fe:	e7bd      	b.n	800607c <_printf_i+0x128>
 8006100:	6833      	ldr	r3, [r6, #0]
 8006102:	6825      	ldr	r5, [r4, #0]
 8006104:	6961      	ldr	r1, [r4, #20]
 8006106:	1d18      	adds	r0, r3, #4
 8006108:	6030      	str	r0, [r6, #0]
 800610a:	062e      	lsls	r6, r5, #24
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	d501      	bpl.n	8006114 <_printf_i+0x1c0>
 8006110:	6019      	str	r1, [r3, #0]
 8006112:	e002      	b.n	800611a <_printf_i+0x1c6>
 8006114:	0668      	lsls	r0, r5, #25
 8006116:	d5fb      	bpl.n	8006110 <_printf_i+0x1bc>
 8006118:	8019      	strh	r1, [r3, #0]
 800611a:	2300      	movs	r3, #0
 800611c:	6123      	str	r3, [r4, #16]
 800611e:	4616      	mov	r6, r2
 8006120:	e7bc      	b.n	800609c <_printf_i+0x148>
 8006122:	6833      	ldr	r3, [r6, #0]
 8006124:	1d1a      	adds	r2, r3, #4
 8006126:	6032      	str	r2, [r6, #0]
 8006128:	681e      	ldr	r6, [r3, #0]
 800612a:	6862      	ldr	r2, [r4, #4]
 800612c:	2100      	movs	r1, #0
 800612e:	4630      	mov	r0, r6
 8006130:	f7fa f876 	bl	8000220 <memchr>
 8006134:	b108      	cbz	r0, 800613a <_printf_i+0x1e6>
 8006136:	1b80      	subs	r0, r0, r6
 8006138:	6060      	str	r0, [r4, #4]
 800613a:	6863      	ldr	r3, [r4, #4]
 800613c:	6123      	str	r3, [r4, #16]
 800613e:	2300      	movs	r3, #0
 8006140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006144:	e7aa      	b.n	800609c <_printf_i+0x148>
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	4632      	mov	r2, r6
 800614a:	4649      	mov	r1, r9
 800614c:	4640      	mov	r0, r8
 800614e:	47d0      	blx	sl
 8006150:	3001      	adds	r0, #1
 8006152:	d0ad      	beq.n	80060b0 <_printf_i+0x15c>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	079b      	lsls	r3, r3, #30
 8006158:	d413      	bmi.n	8006182 <_printf_i+0x22e>
 800615a:	68e0      	ldr	r0, [r4, #12]
 800615c:	9b03      	ldr	r3, [sp, #12]
 800615e:	4298      	cmp	r0, r3
 8006160:	bfb8      	it	lt
 8006162:	4618      	movlt	r0, r3
 8006164:	e7a6      	b.n	80060b4 <_printf_i+0x160>
 8006166:	2301      	movs	r3, #1
 8006168:	4632      	mov	r2, r6
 800616a:	4649      	mov	r1, r9
 800616c:	4640      	mov	r0, r8
 800616e:	47d0      	blx	sl
 8006170:	3001      	adds	r0, #1
 8006172:	d09d      	beq.n	80060b0 <_printf_i+0x15c>
 8006174:	3501      	adds	r5, #1
 8006176:	68e3      	ldr	r3, [r4, #12]
 8006178:	9903      	ldr	r1, [sp, #12]
 800617a:	1a5b      	subs	r3, r3, r1
 800617c:	42ab      	cmp	r3, r5
 800617e:	dcf2      	bgt.n	8006166 <_printf_i+0x212>
 8006180:	e7eb      	b.n	800615a <_printf_i+0x206>
 8006182:	2500      	movs	r5, #0
 8006184:	f104 0619 	add.w	r6, r4, #25
 8006188:	e7f5      	b.n	8006176 <_printf_i+0x222>
 800618a:	bf00      	nop
 800618c:	08006561 	.word	0x08006561
 8006190:	08006572 	.word	0x08006572

08006194 <__sflush_r>:
 8006194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800619c:	0716      	lsls	r6, r2, #28
 800619e:	4605      	mov	r5, r0
 80061a0:	460c      	mov	r4, r1
 80061a2:	d454      	bmi.n	800624e <__sflush_r+0xba>
 80061a4:	684b      	ldr	r3, [r1, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	dc02      	bgt.n	80061b0 <__sflush_r+0x1c>
 80061aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	dd48      	ble.n	8006242 <__sflush_r+0xae>
 80061b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061b2:	2e00      	cmp	r6, #0
 80061b4:	d045      	beq.n	8006242 <__sflush_r+0xae>
 80061b6:	2300      	movs	r3, #0
 80061b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061bc:	682f      	ldr	r7, [r5, #0]
 80061be:	6a21      	ldr	r1, [r4, #32]
 80061c0:	602b      	str	r3, [r5, #0]
 80061c2:	d030      	beq.n	8006226 <__sflush_r+0x92>
 80061c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	0759      	lsls	r1, r3, #29
 80061ca:	d505      	bpl.n	80061d8 <__sflush_r+0x44>
 80061cc:	6863      	ldr	r3, [r4, #4]
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061d2:	b10b      	cbz	r3, 80061d8 <__sflush_r+0x44>
 80061d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061d6:	1ad2      	subs	r2, r2, r3
 80061d8:	2300      	movs	r3, #0
 80061da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061dc:	6a21      	ldr	r1, [r4, #32]
 80061de:	4628      	mov	r0, r5
 80061e0:	47b0      	blx	r6
 80061e2:	1c43      	adds	r3, r0, #1
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	d106      	bne.n	80061f6 <__sflush_r+0x62>
 80061e8:	6829      	ldr	r1, [r5, #0]
 80061ea:	291d      	cmp	r1, #29
 80061ec:	d82b      	bhi.n	8006246 <__sflush_r+0xb2>
 80061ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006298 <__sflush_r+0x104>)
 80061f0:	410a      	asrs	r2, r1
 80061f2:	07d6      	lsls	r6, r2, #31
 80061f4:	d427      	bmi.n	8006246 <__sflush_r+0xb2>
 80061f6:	2200      	movs	r2, #0
 80061f8:	6062      	str	r2, [r4, #4]
 80061fa:	04d9      	lsls	r1, r3, #19
 80061fc:	6922      	ldr	r2, [r4, #16]
 80061fe:	6022      	str	r2, [r4, #0]
 8006200:	d504      	bpl.n	800620c <__sflush_r+0x78>
 8006202:	1c42      	adds	r2, r0, #1
 8006204:	d101      	bne.n	800620a <__sflush_r+0x76>
 8006206:	682b      	ldr	r3, [r5, #0]
 8006208:	b903      	cbnz	r3, 800620c <__sflush_r+0x78>
 800620a:	6560      	str	r0, [r4, #84]	@ 0x54
 800620c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800620e:	602f      	str	r7, [r5, #0]
 8006210:	b1b9      	cbz	r1, 8006242 <__sflush_r+0xae>
 8006212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006216:	4299      	cmp	r1, r3
 8006218:	d002      	beq.n	8006220 <__sflush_r+0x8c>
 800621a:	4628      	mov	r0, r5
 800621c:	f7ff fbea 	bl	80059f4 <_free_r>
 8006220:	2300      	movs	r3, #0
 8006222:	6363      	str	r3, [r4, #52]	@ 0x34
 8006224:	e00d      	b.n	8006242 <__sflush_r+0xae>
 8006226:	2301      	movs	r3, #1
 8006228:	4628      	mov	r0, r5
 800622a:	47b0      	blx	r6
 800622c:	4602      	mov	r2, r0
 800622e:	1c50      	adds	r0, r2, #1
 8006230:	d1c9      	bne.n	80061c6 <__sflush_r+0x32>
 8006232:	682b      	ldr	r3, [r5, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0c6      	beq.n	80061c6 <__sflush_r+0x32>
 8006238:	2b1d      	cmp	r3, #29
 800623a:	d001      	beq.n	8006240 <__sflush_r+0xac>
 800623c:	2b16      	cmp	r3, #22
 800623e:	d11e      	bne.n	800627e <__sflush_r+0xea>
 8006240:	602f      	str	r7, [r5, #0]
 8006242:	2000      	movs	r0, #0
 8006244:	e022      	b.n	800628c <__sflush_r+0xf8>
 8006246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800624a:	b21b      	sxth	r3, r3
 800624c:	e01b      	b.n	8006286 <__sflush_r+0xf2>
 800624e:	690f      	ldr	r7, [r1, #16]
 8006250:	2f00      	cmp	r7, #0
 8006252:	d0f6      	beq.n	8006242 <__sflush_r+0xae>
 8006254:	0793      	lsls	r3, r2, #30
 8006256:	680e      	ldr	r6, [r1, #0]
 8006258:	bf08      	it	eq
 800625a:	694b      	ldreq	r3, [r1, #20]
 800625c:	600f      	str	r7, [r1, #0]
 800625e:	bf18      	it	ne
 8006260:	2300      	movne	r3, #0
 8006262:	eba6 0807 	sub.w	r8, r6, r7
 8006266:	608b      	str	r3, [r1, #8]
 8006268:	f1b8 0f00 	cmp.w	r8, #0
 800626c:	dde9      	ble.n	8006242 <__sflush_r+0xae>
 800626e:	6a21      	ldr	r1, [r4, #32]
 8006270:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006272:	4643      	mov	r3, r8
 8006274:	463a      	mov	r2, r7
 8006276:	4628      	mov	r0, r5
 8006278:	47b0      	blx	r6
 800627a:	2800      	cmp	r0, #0
 800627c:	dc08      	bgt.n	8006290 <__sflush_r+0xfc>
 800627e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006286:	81a3      	strh	r3, [r4, #12]
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006290:	4407      	add	r7, r0
 8006292:	eba8 0800 	sub.w	r8, r8, r0
 8006296:	e7e7      	b.n	8006268 <__sflush_r+0xd4>
 8006298:	dfbffffe 	.word	0xdfbffffe

0800629c <_fflush_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	690b      	ldr	r3, [r1, #16]
 80062a0:	4605      	mov	r5, r0
 80062a2:	460c      	mov	r4, r1
 80062a4:	b913      	cbnz	r3, 80062ac <_fflush_r+0x10>
 80062a6:	2500      	movs	r5, #0
 80062a8:	4628      	mov	r0, r5
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
 80062ac:	b118      	cbz	r0, 80062b6 <_fflush_r+0x1a>
 80062ae:	6a03      	ldr	r3, [r0, #32]
 80062b0:	b90b      	cbnz	r3, 80062b6 <_fflush_r+0x1a>
 80062b2:	f7ff f8e9 	bl	8005488 <__sinit>
 80062b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0f3      	beq.n	80062a6 <_fflush_r+0xa>
 80062be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062c0:	07d0      	lsls	r0, r2, #31
 80062c2:	d404      	bmi.n	80062ce <_fflush_r+0x32>
 80062c4:	0599      	lsls	r1, r3, #22
 80062c6:	d402      	bmi.n	80062ce <_fflush_r+0x32>
 80062c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ca:	f7ff fb90 	bl	80059ee <__retarget_lock_acquire_recursive>
 80062ce:	4628      	mov	r0, r5
 80062d0:	4621      	mov	r1, r4
 80062d2:	f7ff ff5f 	bl	8006194 <__sflush_r>
 80062d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062d8:	07da      	lsls	r2, r3, #31
 80062da:	4605      	mov	r5, r0
 80062dc:	d4e4      	bmi.n	80062a8 <_fflush_r+0xc>
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	059b      	lsls	r3, r3, #22
 80062e2:	d4e1      	bmi.n	80062a8 <_fflush_r+0xc>
 80062e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062e6:	f7ff fb83 	bl	80059f0 <__retarget_lock_release_recursive>
 80062ea:	e7dd      	b.n	80062a8 <_fflush_r+0xc>

080062ec <__swhatbuf_r>:
 80062ec:	b570      	push	{r4, r5, r6, lr}
 80062ee:	460c      	mov	r4, r1
 80062f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f4:	2900      	cmp	r1, #0
 80062f6:	b096      	sub	sp, #88	@ 0x58
 80062f8:	4615      	mov	r5, r2
 80062fa:	461e      	mov	r6, r3
 80062fc:	da0d      	bge.n	800631a <__swhatbuf_r+0x2e>
 80062fe:	89a3      	ldrh	r3, [r4, #12]
 8006300:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006304:	f04f 0100 	mov.w	r1, #0
 8006308:	bf14      	ite	ne
 800630a:	2340      	movne	r3, #64	@ 0x40
 800630c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006310:	2000      	movs	r0, #0
 8006312:	6031      	str	r1, [r6, #0]
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	b016      	add	sp, #88	@ 0x58
 8006318:	bd70      	pop	{r4, r5, r6, pc}
 800631a:	466a      	mov	r2, sp
 800631c:	f000 f848 	bl	80063b0 <_fstat_r>
 8006320:	2800      	cmp	r0, #0
 8006322:	dbec      	blt.n	80062fe <__swhatbuf_r+0x12>
 8006324:	9901      	ldr	r1, [sp, #4]
 8006326:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800632a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800632e:	4259      	negs	r1, r3
 8006330:	4159      	adcs	r1, r3
 8006332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006336:	e7eb      	b.n	8006310 <__swhatbuf_r+0x24>

08006338 <__smakebuf_r>:
 8006338:	898b      	ldrh	r3, [r1, #12]
 800633a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800633c:	079d      	lsls	r5, r3, #30
 800633e:	4606      	mov	r6, r0
 8006340:	460c      	mov	r4, r1
 8006342:	d507      	bpl.n	8006354 <__smakebuf_r+0x1c>
 8006344:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	6123      	str	r3, [r4, #16]
 800634c:	2301      	movs	r3, #1
 800634e:	6163      	str	r3, [r4, #20]
 8006350:	b003      	add	sp, #12
 8006352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006354:	ab01      	add	r3, sp, #4
 8006356:	466a      	mov	r2, sp
 8006358:	f7ff ffc8 	bl	80062ec <__swhatbuf_r>
 800635c:	9f00      	ldr	r7, [sp, #0]
 800635e:	4605      	mov	r5, r0
 8006360:	4639      	mov	r1, r7
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff fbba 	bl	8005adc <_malloc_r>
 8006368:	b948      	cbnz	r0, 800637e <__smakebuf_r+0x46>
 800636a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800636e:	059a      	lsls	r2, r3, #22
 8006370:	d4ee      	bmi.n	8006350 <__smakebuf_r+0x18>
 8006372:	f023 0303 	bic.w	r3, r3, #3
 8006376:	f043 0302 	orr.w	r3, r3, #2
 800637a:	81a3      	strh	r3, [r4, #12]
 800637c:	e7e2      	b.n	8006344 <__smakebuf_r+0xc>
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	6020      	str	r0, [r4, #0]
 8006382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	9b01      	ldr	r3, [sp, #4]
 800638a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800638e:	b15b      	cbz	r3, 80063a8 <__smakebuf_r+0x70>
 8006390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006394:	4630      	mov	r0, r6
 8006396:	f000 f81d 	bl	80063d4 <_isatty_r>
 800639a:	b128      	cbz	r0, 80063a8 <__smakebuf_r+0x70>
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	f023 0303 	bic.w	r3, r3, #3
 80063a2:	f043 0301 	orr.w	r3, r3, #1
 80063a6:	81a3      	strh	r3, [r4, #12]
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	431d      	orrs	r5, r3
 80063ac:	81a5      	strh	r5, [r4, #12]
 80063ae:	e7cf      	b.n	8006350 <__smakebuf_r+0x18>

080063b0 <_fstat_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	4d07      	ldr	r5, [pc, #28]	@ (80063d0 <_fstat_r+0x20>)
 80063b4:	2300      	movs	r3, #0
 80063b6:	4604      	mov	r4, r0
 80063b8:	4608      	mov	r0, r1
 80063ba:	4611      	mov	r1, r2
 80063bc:	602b      	str	r3, [r5, #0]
 80063be:	f7fa fe04 	bl	8000fca <_fstat>
 80063c2:	1c43      	adds	r3, r0, #1
 80063c4:	d102      	bne.n	80063cc <_fstat_r+0x1c>
 80063c6:	682b      	ldr	r3, [r5, #0]
 80063c8:	b103      	cbz	r3, 80063cc <_fstat_r+0x1c>
 80063ca:	6023      	str	r3, [r4, #0]
 80063cc:	bd38      	pop	{r3, r4, r5, pc}
 80063ce:	bf00      	nop
 80063d0:	20000388 	.word	0x20000388

080063d4 <_isatty_r>:
 80063d4:	b538      	push	{r3, r4, r5, lr}
 80063d6:	4d06      	ldr	r5, [pc, #24]	@ (80063f0 <_isatty_r+0x1c>)
 80063d8:	2300      	movs	r3, #0
 80063da:	4604      	mov	r4, r0
 80063dc:	4608      	mov	r0, r1
 80063de:	602b      	str	r3, [r5, #0]
 80063e0:	f7fa fe03 	bl	8000fea <_isatty>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d102      	bne.n	80063ee <_isatty_r+0x1a>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	b103      	cbz	r3, 80063ee <_isatty_r+0x1a>
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
 80063f0:	20000388 	.word	0x20000388

080063f4 <_sbrk_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4d06      	ldr	r5, [pc, #24]	@ (8006410 <_sbrk_r+0x1c>)
 80063f8:	2300      	movs	r3, #0
 80063fa:	4604      	mov	r4, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	f7fa fe0c 	bl	800101c <_sbrk>
 8006404:	1c43      	adds	r3, r0, #1
 8006406:	d102      	bne.n	800640e <_sbrk_r+0x1a>
 8006408:	682b      	ldr	r3, [r5, #0]
 800640a:	b103      	cbz	r3, 800640e <_sbrk_r+0x1a>
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	20000388 	.word	0x20000388

08006414 <_init>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	bf00      	nop
 8006418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641a:	bc08      	pop	{r3}
 800641c:	469e      	mov	lr, r3
 800641e:	4770      	bx	lr

08006420 <_fini>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	bf00      	nop
 8006424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006426:	bc08      	pop	{r3}
 8006428:	469e      	mov	lr, r3
 800642a:	4770      	bx	lr
